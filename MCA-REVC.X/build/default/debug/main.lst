CCS PCH C Compiler, Version 5.045, 5967               22-Nov-15 19:43

               Filename:   F:\Dropbox (Personal)\Doktorat\GitRepository\MCA Driver\MCA-REVC.X\build\default\debug\main.lst

               ROM used:   1064 bytes (7%)
                           Largest free fragment is 14484
               RAM used:   198 (26%) at main() level
                           208 (28%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 30

*
0000:  GOTO   0388
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   00BA
0060:  BTFSS  F9D.4
0062:  GOTO   006C
0066:  BTFSC  F9E.4
0068:  GOTO   010A
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... /*  
....................  * File:   main.c 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #include "main.h" 
.................... /*  
....................  * File:   main.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #ifndef main_H 
.................... #define main_H 
....................  
.................... #include <18F4431.h> 
.................... //////////// Standard Header file for the PIC18F4431 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4431 
*
0136:  MOVFF  FEC,FFA
013A:  MOVF   FED,F
013C:  MOVFF  FEF,FE8
0140:  MOVWF  FF9
0142:  RETURN 0
0144:  DATA 4D,65
0146:  DATA 73,73
0148:  DATA 61,67
014A:  DATA 65,20
014C:  DATA 72,65
014E:  DATA 63,65
0150:  DATA 69,76
0152:  DATA 65,20
0154:  DATA 64,6F
0156:  DATA 6E,65
0158:  DATA 2E,00
015A:  DATA 0D,0A
015C:  DATA 52,75
015E:  DATA 6E,6E
0160:  DATA 69,6E
0162:  DATA 67,2E
0164:  DATA 2E,2E
0166:  DATA 0D,0A
0168:  DATA 00,00
*
01DE:  TBLRD*+
01E0:  MOVF   FF5,F
01E2:  BZ    01FC
01E4:  MOVFF  FF6,C6
01E8:  MOVFF  FF7,C7
01EC:  MOVFF  FF5,C8
01F0:  BRA    01A6
01F2:  MOVFF  C6,FF6
01F6:  MOVFF  C7,FF7
01FA:  BRA    01DE
01FC:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #device     ADC = 10  
.................... #fuses      H4 
.................... #fuses      NOFCMEN 
.................... #fuses      NOIESO 
.................... #fuses      NOPUT 
.................... #fuses      NOBROWNOUT 
.................... #fuses      NOWDT 
.................... #fuses      NOWINEN 
.................... #fuses      NOPWMPIN 
.................... #fuses      HPOL_HIGH 
.................... #fuses      LPOL_HIGH 
.................... #fuses      T1LOWPOWER 
.................... #fuses      FLTAD4 
.................... #fuses      SSP_RC 
.................... #fuses      NOPWMPIN 
.................... #fuses      MCLR 
.................... #fuses      NOLVP 
.................... #fuses      NODEBUG 
....................  
.................... #define     RX_PIN      PIN_C7 
.................... #define     TX_PIN      PIN_C6 
.................... #define     RS485_RW    PIN_C0 
....................  
.................... #use delay(clock = 40MHZ) 
.................... #use rs232(xmit=TX_PIN, rcv=RX_PIN, enable=RS485_RW) 
*
00EC:  BCF    F94.0
00EE:  BSF    F8B.0
00F0:  BTFSS  F9E.4
00F2:  BRA    00F0
00F4:  BCF    F94.0
00F6:  BSF    F8B.0
00F8:  MOVFF  CE,FAD
00FC:  NOP   
00FE:  BTFSS  FAC.1
0100:  BRA    00FE
0102:  BCF    F94.0
0104:  BCF    F8B.0
0106:  GOTO   0124 (RETURN)
....................   
.................... // UART Registers and bits 
.................... #byte TXSTA=0xFAC 
.................... #bit  BRGH=TXSTA.2 
.................... #bit  SYNC=TXSTA.4 
....................  
.................... #byte RCSTA=0xFAB 
.................... #bit  ADDEN=RCSTA.3 
.................... #bit  RX9=RCSTA.6 
....................  
.................... #byte BAUDCTL=0xFAA 
.................... #bit  BRG16=BAUDCTL.3 
....................  
.................... int16 SPBRG;  
.................... #locate SPBRG=0xFAF 
....................  
....................  
.................... #endif 
....................  
....................  
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_rcv_isr(void); 
.................... void serial_td_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_bputc(BYTE); 
.................... void uart_init(unsigned int, BYTE); 
.................... /* Uart parser state machine states */ 
.................... void parse_uart_data(void);  
.................... void wait_for_start(void);  // Waits for the # character 
.................... void wait_for_adr(void);    // Wait for device address 
.................... void parse_id(void);        // Reads the 3 char identifier, stores it in data_id 
.................... void parse_length(void);    // Reads [LENGTH] field, stores it in data_length 
.................... void parse_data(void);      // Reads the data into data_buffer[] 
.................... void parse_crc(void);       // Reads the crc checksum (and checks the data) 
.................... void parse_end(void);       // End of data packet (#) handling.. start all over. 
.................... short crc_check(void);       
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
.................... #include "uart.c" 
.................... /* 
....................  * File:   uart.c 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_rcv_isr(void); 
.................... void serial_td_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_bputc(BYTE); 
.................... void uart_init(unsigned int, BYTE); 
.................... /* Uart parser state machine states */ 
.................... void parse_uart_data(void);  
.................... void wait_for_start(void);  // Waits for the # character 
.................... void wait_for_adr(void);    // Wait for device address 
.................... void parse_id(void);        // Reads the 3 char identifier, stores it in data_id 
.................... void parse_length(void);    // Reads [LENGTH] field, stores it in data_length 
.................... void parse_data(void);      // Reads the data into data_buffer[] 
.................... void parse_crc(void);       // Reads the crc checksum (and checks the data) 
.................... void parse_end(void);       // End of data packet (#) handling.. start all over. 
.................... short crc_check(void);       
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
....................  
.................... //Defines 
.................... #define UART_BUFFER_SIZE    64 
.................... #define DATA_BUFFER_SIZE    32     
.................... #define uart_bkbhit (in.next_in!=in.next_out) 
....................  
.................... // Type definitions 
.................... typedef struct buffer 
.................... { 
....................     BYTE uart_buffer[UART_BUFFER_SIZE]; 
....................     BYTE next_in; 
....................     BYTE next_out; 
.................... } t_buffer; 
....................  
.................... typedef struct package 
.................... { 
....................     BYTE data_buffer[DATA_BUFFER_SIZE]; 
....................     BYTE dev_address; 
....................     BYTE ID; 
....................     BYTE data_length; 
....................     BYTE crc; 
.................... } t_package; 
....................  
.................... typedef void (*t_fptr)(void); 
.................... //Variables 
.................... //UART 
.................... t_buffer in = {{0}, 0, 0}; 
.................... t_buffer out = {{0}, 0, 0}; 
.................... //Message parser 
.................... t_package data = {{0}, 0, 0, 0}; 
....................  
.................... //Pointer to a function that takes no parameters and returns nothing. 
.................... t_fptr parse_next = wait_for_start;          //Initialize the pointer to point to first state 
.................... // Functions 
.................... /** 
....................  * UART receive interrupt handler 
....................  */ 
.................... #int_rda 
.................... void serial_rcv_isr() 
.................... { 
....................     int t; 
....................      
....................     in.uart_buffer[in.next_in] = getc(); 
*
00BA:  CLRF   03
00BC:  MOVF   59,W
00BE:  ADDLW  19
00C0:  MOVWF  FE9
00C2:  MOVLW  00
00C4:  ADDWFC 03,W
00C6:  MOVWF  FEA
00C8:  BTFSS  F9E.5
00CA:  BRA    00C8
00CC:  MOVFF  FAE,FEF
....................     t = in.next_in; 
00D0:  MOVFF  59,CD
....................     in.next_in = (in.next_in + 1) % UART_BUFFER_SIZE; 
00D4:  MOVLW  01
00D6:  ADDWF  59,W
00D8:  ANDLW  3F
00DA:  MOVWF  59
....................     if (in.next_in == in.next_out) 
00DC:  MOVF   5A,W
00DE:  SUBWF  59,W
00E0:  BNZ   00E6
....................         in.next_in = t;                                // Buffer full 
00E2:  MOVFF  CD,59
.................... } 
.................... /** 
....................  * UART transmit interrupt handler 
....................  */ 
00E6:  BCF    F9E.5
00E8:  GOTO   006C
.................... #int_tbe 
.................... void serial_td_isr() 
.................... { 
....................     if (out.next_in != out.next_out) 
*
010A:  MOVF   x9C,W
010C:  SUBWF  x9B,W
010E:  BZ    012E
....................     { 
....................         putc(out.uart_buffer[out.next_out]); 
0110:  CLRF   03
0112:  MOVF   x9C,W
0114:  ADDLW  5B
0116:  MOVWF  FE9
0118:  MOVLW  00
011A:  ADDWFC 03,W
011C:  MOVWF  FEA
011E:  MOVFF  FEF,CE
0122:  BRA    00EC
....................         out.next_out = (out.next_out + 1) % UART_BUFFER_SIZE; 
0124:  MOVLW  01
0126:  ADDWF  x9C,W
0128:  ANDLW  3F
012A:  MOVWF  x9C
....................     } 
012C:  BRA    0130
....................     else 
....................         disable_interrupts(int_tbe); 
012E:  BCF    F9D.4
0130:  BCF    F9E.4
0132:  GOTO   006C
.................... } 
.................... /** 
....................  * uart_bgetc, Function return one byte from uart input buffer 
....................  * @return , first buffer that is written to the uart input buffer. 
....................  */ 
.................... BYTE uart_bgetc() 
.................... { 
....................     BYTE c; 
....................      
....................     //while(!uart_bkbhit);                          // This should be checked 
....................                                                     // in parser before state 
....................                                                     //machine is called 
....................     c = in.uart_buffer[in.next_out]; 
*
01FE:  CLRF   03
0200:  MOVF   5A,W
0202:  ADDLW  19
0204:  MOVWF  FE9
0206:  MOVLW  00
0208:  ADDWFC 03,W
020A:  MOVWF  FEA
020C:  MOVFF  FEF,C8
....................     in.next_out = (in.next_out + 1) % UART_BUFFER_SIZE; 
0210:  MOVLW  01
0212:  ADDWF  5A,W
0214:  ANDLW  3F
0216:  MOVWF  5A
....................     return (c); 
0218:  MOVFF  C8,01
021C:  RETURN 0
.................... } 
.................... /** 
....................  * bputc, Function add one byte to uart output buffer 
....................  * @param c, byte that will be added in uart output buffer. 
....................  */ 
.................... void uart_bputc(BYTE c) 
.................... { 
....................     short restart; 
....................     int ni; 
....................      
....................     restart = out.next_in == out.next_out; 
*
01A6:  BCF    xC9.0
01A8:  MOVF   x9C,W
01AA:  SUBWF  x9B,W
01AC:  BNZ   01B0
01AE:  BSF    xC9.0
....................     out.uart_buffer[out.next_in] = c; 
01B0:  CLRF   03
01B2:  MOVF   x9B,W
01B4:  ADDLW  5B
01B6:  MOVWF  FE9
01B8:  MOVLW  00
01BA:  ADDWFC 03,W
01BC:  MOVWF  FEA
01BE:  MOVFF  C8,FEF
....................     ni = (out.next_in + 1) % UART_BUFFER_SIZE; 
01C2:  MOVLW  01
01C4:  ADDWF  x9B,W
01C6:  ANDLW  3F
01C8:  MOVWF  xCA
....................     while(ni == out.next_out); 
01CA:  MOVF   x9C,W
01CC:  SUBWF  xCA,W
01CE:  BZ    01CA
....................     out.next_in = ni; 
01D0:  MOVFF  CA,9B
....................     if (restart) 
01D4:  BTFSS  xC9.0
01D6:  BRA    01DA
....................         enable_interrupts(int_tbe); 
01D8:  BSF    F9D.4
01DA:  GOTO   01F2 (RETURN)
.................... } 
.................... /** 
....................  * uart_init, Function configure uart peripheral 
....................  * @param baudrate, Possible baudrates are: 1 - 19200, 2 - 115200, 3 - 256000 
....................  * @param dev_id, Device address used in RS485 communication 
....................  */ 
.................... void uart_init(unsigned int baudrate, BYTE dev_id) 
.................... { 
....................     unsigned long divisor; 
....................      
....................     switch (baudrate) 
*
016A:  MOVF   xC6,W
016C:  XORLW  01
016E:  BZ    017A
0170:  XORLW  03
0172:  BZ    0184
0174:  XORLW  01
0176:  BZ    018C
0178:  BRA    0192
....................     { 
....................         case 1: 
....................             //setup_uart(19200); 
....................             divisor = 520; 
017A:  MOVLW  02
017C:  MOVWF  xC9
017E:  MOVLW  08
0180:  MOVWF  xC8
....................             break; 
0182:  BRA    0192
....................         case 2: 
....................             //setup_uart(115200); 
....................             divisor = 85; 
0184:  CLRF   xC9
0186:  MOVLW  55
0188:  MOVWF  xC8
....................             break; 
018A:  BRA    0192
....................         case 3: 
....................             //setup_uart(256000); 
....................             divisor = 38; 
018C:  CLRF   xC9
018E:  MOVLW  26
0190:  MOVWF  xC8
....................             break; 
....................     } 
....................      
....................     // Switch to 16bit mode 
....................     SYNC = 0; 
0192:  BCF    FAC.4
....................     BRGH = 1; 
0194:  BSF    FAC.2
....................     BRG16 = 1; 
0196:  BSF    FAA.3
....................     // Select 9-bit reception 
....................     //RX9 = 0; 
....................     // Disable uart address detecion on receive 
....................     //ADDEN = 0; 
....................     // Configure uart speed 
....................     SPBRG = divisor; 
0198:  MOVFF  C9,FB0
019C:  MOVFF  C8,FAF
....................     //fp_parser = wait_for_start; 
....................     enable_interrupts(INT_RDA); 
01A0:  BSF    F9D.5
01A2:  GOTO   0410 (RETURN)
.................... } 
....................  
.................... void parse_uart_data() 
.................... { 
....................     (*parse_next)(); 
*
037C:  CLRF   FEA
037E:  MOVLW  C1
0380:  MOVWF  FE9
0382:  RCALL  0136
0384:  GOTO   041E (RETURN)
.................... } 
....................  
.................... void wait_for_start() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
*
021E:  MOVF   5A,W
0220:  SUBWF  59,W
0222:  BNZ   0226
....................         return; 
0224:  BRA    0242
....................      
....................     /* If the data is start character, we update the state */ 
....................     if (uart_bgetc() == '#') 
0226:  RCALL  01FE
0228:  MOVF   01,W
022A:  SUBLW  23
022C:  BNZ   0242
....................     { 
....................         /* Initialize data variables, just in case */ 
....................         data.dev_address = 0; 
022E:  CLRF   xBD
....................         data.ID = 0; 
0230:  CLRF   xBE
....................         data.data_length = 0; 
0232:  CLRF   xBF
....................         data.crc = 0; 
0234:  CLRF   xC0
....................         parse_next = wait_for_adr; // Next we parse the [ID] field 
0236:  MOVLW  02
0238:  MOVWF  03
023A:  MOVLW  44
023C:  MOVWF  xC1
023E:  MOVFF  03,C2
....................     } 
0242:  RETURN 0
.................... } 
....................  
.................... void wait_for_adr() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
0244:  MOVF   5A,W
0246:  SUBWF  59,W
0248:  BNZ   024C
....................         return; 
024A:  BRA    025E
....................      
....................     data.dev_address = uart_bgetc(); 
024C:  RCALL  01FE
024E:  MOVFF  01,BD
....................     parse_next = parse_id; 
0252:  MOVLW  02
0254:  MOVWF  03
0256:  MOVLW  60
0258:  MOVWF  xC1
025A:  MOVFF  03,C2
025E:  RETURN 0
.................... } 
.................... void parse_id() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
0260:  MOVF   5A,W
0262:  SUBWF  59,W
0264:  BNZ   0268
....................         return; 
0266:  BRA    027A
....................      
....................     data.ID = uart_bgetc(); 
0268:  RCALL  01FE
026A:  MOVFF  01,BE
....................     parse_next = parse_length; 
026E:  MOVLW  02
0270:  MOVWF  03
0272:  MOVLW  7C
0274:  MOVWF  xC1
0276:  MOVFF  03,C2
027A:  RETURN 0
.................... } 
....................  
.................... void parse_length() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
027C:  MOVF   5A,W
027E:  SUBWF  59,W
0280:  BNZ   0284
....................         return; 
0282:  BRA    0296
....................      
....................     data.data_length = uart_bgetc(); 
0284:  RCALL  01FE
0286:  MOVFF  01,BF
....................     parse_next = parse_data; 
028A:  MOVLW  02
028C:  MOVWF  03
028E:  MOVLW  98
0290:  MOVWF  xC1
0292:  MOVFF  03,C2
0296:  RETURN 0
.................... } 
....................  
.................... int count = 0; 
.................... void parse_data() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
0298:  MOVF   5A,W
029A:  SUBWF  59,W
029C:  BNZ   02A0
....................         return; 
029E:  BRA    02D8
....................     /* Add received byte to the data_length variable. 
....................        The bytes arrive in Big Endian order. */ 
....................     data.data_buffer[count] = uart_bgetc(); 
02A0:  CLRF   03
02A2:  MOVF   xC3,W
02A4:  ADDLW  9D
02A6:  MOVWF  01
02A8:  MOVLW  00
02AA:  ADDWFC 03,F
02AC:  MOVFF  01,C6
02B0:  MOVFF  03,C7
02B4:  RCALL  01FE
02B6:  MOVFF  C7,FEA
02BA:  MOVFF  C6,FE9
02BE:  MOVFF  01,FEF
....................     count++; 
02C2:  INCF   xC3,F
....................     /* State transition rule */ 
....................     if (count == data.data_length) 
02C4:  MOVF   xBF,W
02C6:  SUBWF  xC3,W
02C8:  BNZ   02D8
....................     { 
....................         count = 0;  // Reset counter 
02CA:  CLRF   xC3
....................         parse_next = parse_crc; 
02CC:  MOVLW  03
02CE:  MOVWF  03
02D0:  MOVLW  16
02D2:  MOVWF  xC1
02D4:  MOVFF  03,C2
....................     } 
02D8:  RETURN 0
.................... } 
....................  
.................... void parse_crc() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
*
0316:  MOVF   5A,W
0318:  SUBWF  59,W
031A:  BNZ   031E
....................         return; 
031C:  BRA    0344
....................      
....................     data.crc = uart_bgetc(); 
031E:  RCALL  01FE
0320:  MOVFF  01,C0
....................     // Check CRC 
....................     if (!crc_check()) 
0324:  BRA    02DA
0326:  MOVF   01,F
0328:  BNZ   0338
....................     { 
....................         parse_next = wait_for_start; 
032A:  MOVLW  02
032C:  MOVWF  03
032E:  MOVLW  1E
0330:  MOVWF  xC1
0332:  MOVFF  03,C2
....................         return; 
0336:  BRA    0344
....................     } 
....................     parse_next = parse_end; 
0338:  MOVLW  03
033A:  MOVWF  03
033C:  MOVLW  46
033E:  MOVWF  xC1
0340:  MOVFF  03,C2
0344:  RETURN 0
.................... } 
....................  
.................... void parse_end() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
0346:  MOVF   5A,W
0348:  SUBWF  59,W
034A:  BNZ   034E
....................         return; 
034C:  BRA    037A
....................     // If last byte isn't stop character, something goes wrong in transmission 
....................     // and package will be rejected 
....................     if (uart_bgetc() != '$') 
034E:  RCALL  01FE
0350:  MOVF   01,W
0352:  SUBLW  24
0354:  BZ    0364
....................     { 
....................         parse_next = wait_for_start; 
0356:  MOVLW  02
0358:  MOVWF  03
035A:  MOVLW  1E
035C:  MOVWF  xC1
035E:  MOVFF  03,C2
....................         return; 
0362:  BRA    037A
....................     } 
....................     parse_next = wait_for_start; 
0364:  MOVLW  02
0366:  MOVWF  03
0368:  MOVLW  1E
036A:  MOVWF  xC1
036C:  MOVFF  03,C2
....................     // Handle data 
....................     printf(uart_bputc, "Message receive done."); 
0370:  MOVLW  44
0372:  MOVWF  FF6
0374:  MOVLW  01
0376:  MOVWF  FF7
0378:  RCALL  01DE
037A:  RETURN 0
.................... } 
....................  
.................... short crc_check() 
*
02DA:  CLRF   xC7
.................... { 
....................     int i; 
....................     int crc8 = 0; 
....................     crc8 = crc8 ^ data.dev_address ^ data.ID ^ data.data_length; 
02DC:  MOVF   xC7,W
02DE:  XORWF  xBD,W
02E0:  XORWF  xBE,W
02E2:  XORWF  xBF,W
02E4:  MOVWF  xC7
....................     for(i=0; i<data.data_length; i++) 
02E6:  CLRF   xC6
02E8:  MOVF   xBF,W
02EA:  SUBWF  xC6,W
02EC:  BC    0304
....................         crc8 = crc8 ^ data.data_buffer[i]; 
02EE:  CLRF   03
02F0:  MOVF   xC6,W
02F2:  ADDLW  9D
02F4:  MOVWF  FE9
02F6:  MOVLW  00
02F8:  ADDWFC 03,W
02FA:  MOVWF  FEA
02FC:  MOVF   FEF,W
02FE:  XORWF  xC7,F
0300:  INCF   xC6,F
0302:  BRA    02E8
....................      
....................     return crc8 == data.crc; 
0304:  MOVF   xC0,W
0306:  SUBWF  xC7,W
0308:  BZ    030E
030A:  MOVLW  00
030C:  BRA    0310
030E:  MOVLW  01
0310:  MOVWF  01
0312:  GOTO   0326 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void main() 
*
0388:  CLRF   FF8
038A:  BCF    FD0.7
038C:  BSF    07.7
038E:  BCF    F94.0
0390:  BCF    F8B.0
0392:  BSF    FAA.3
0394:  MOVLW  11
0396:  MOVWF  FAF
0398:  MOVLW  04
039A:  MOVWF  FB0
039C:  MOVLW  A6
039E:  MOVWF  FAC
03A0:  MOVLW  90
03A2:  MOVWF  FAB
03A4:  MOVLW  02
03A6:  MOVWF  03
03A8:  MOVLW  1E
03AA:  MOVWF  xC1
03AC:  MOVFF  03,C2
03B0:  CLRF   xC3
03B2:  CLRF   xC5
03B4:  CLRF   xC4
03B6:  BCF    FB9.0
03B8:  BCF    FC1.6
03BA:  BCF    FC1.7
03BC:  MOVLW  00
03BE:  MOVWF  FB8
03C0:  BRA    03C8
03C2:  DATA A8,40
03C4:  DATA 19,00
03C6:  DATA 00,00
03C8:  MOVLW  00
03CA:  MOVWF  FF8
03CC:  MOVLW  03
03CE:  MOVWF  FF7
03D0:  MOVLW  C2
03D2:  MOVWF  FF6
03D4:  TBLRD*+
03D6:  MOVF   FF5,W
03D8:  MOVWF  00
03DA:  XORLW  00
03DC:  BZ    0404
03DE:  TBLRD*+
03E0:  MOVF   FF5,W
03E2:  MOVWF  01
03E4:  BTFSC  FE8.7
03E6:  BRA    03F2
03E8:  ANDLW  0F
03EA:  MOVWF  FEA
03EC:  TBLRD*+
03EE:  MOVFF  FF5,FE9
03F2:  BTFSC  01.6
03F4:  TBLRD*+
03F6:  BTFSS  01.6
03F8:  TBLRD*+
03FA:  MOVFF  FF5,FEE
03FE:  DCFSNZ 00,F
0400:  BRA    03D4
0402:  BRA    03F6
0404:  CLRF   FF8
.................... { 
....................     uart_init(2, 120);  
0406:  MOVLW  02
0408:  MOVWF  xC6
040A:  MOVLW  78
040C:  MOVWF  xC7
040E:  BRA    016A
....................     enable_interrupts(GLOBAL); 
0410:  MOVLW  C0
0412:  IORWF  FF2,F
....................      
....................     printf(uart_bputc, "\r\n\Running...\r\n"); 
0414:  MOVLW  5A
0416:  MOVWF  FF6
0418:  MOVLW  01
041A:  MOVWF  FF7
041C:  RCALL  01DE
....................      
....................     while (1) 
....................     { 
....................         //delay_ms(5000); 
....................         //printf("\r\nBuffered data => \r\n"); 
....................         while (uart_bkbhit) 
041E:  MOVF   5A,W
0420:  SUBWF  59,W
0422:  BZ    0428
....................             parse_uart_data(); 
0424:  BRA    037C
0426:  BRA    041E
0428:  BRA    041E
....................     } 
.................... } 
....................  
042A:  BRA    042A

Configuration Fuses:
   Word  1: 0600   H4 NOFCMEN NOIESO
   Word  2: 3E0D   NOPUT NOBROWNOUT BORV20 NOWDT WDT32768 NOWINEN
   Word  3: 9C3C   NOPWMPIN LPOL_HIGH HPOL_HIGH T1LOWPOWER FLTAD4 SSP_RC PWM4B5 EXCLKC3 MCLR
   Word  4: 0001   STVREN NOLVP DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
