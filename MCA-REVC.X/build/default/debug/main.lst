CCS PCH C Compiler, Version 5.045, 5967               20-Nov-15 01:01

               Filename:   F:\Dropbox (Personal)\Doktorat\GitRepository\MCA Driver\MCA-REVC.X\build\default\debug\main.lst

               ROM used:   642 bytes (4%)
                           Largest free fragment is 14906
               RAM used:   62 (8%) at main() level
                           68 (9%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 30

*
0000:  GOTO   01CA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /*  
....................  * File:   main.c 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #include "main.h" 
.................... /*  
....................  * File:   main.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #ifndef main_H 
.................... #define main_H 
....................  
.................... #include <18F4431.h> 
.................... //////////// Standard Header file for the PIC18F4431 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4431 
*
00E0:  DATA 0D,0A
00E2:  DATA 52,75
00E4:  DATA 6E,6E
00E6:  DATA 69,6E
00E8:  DATA 67,2E
00EA:  DATA 2E,2E
00EC:  DATA 0D,0A
00EE:  DATA 00,00
00F0:  DATA 0D,0A
00F2:  DATA 42,75
00F4:  DATA 66,66
00F6:  DATA 65,72
00F8:  DATA 65,64
00FA:  DATA 20,64
00FC:  DATA 61,74
00FE:  DATA 61,20
0100:  DATA 3D,3E
0102:  DATA 20,0D
0104:  DATA 0A,00
*
015E:  TBLRD*+
0160:  MOVF   FF5,F
0162:  BZ    017C
0164:  MOVFF  FF6,3D
0168:  MOVFF  FF7,3E
016C:  MOVFF  FF5,3F
0170:  RCALL  0142
0172:  MOVFF  3D,FF6
0176:  MOVFF  3E,FF7
017A:  BRA    015E
017C:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #device     ADC = 10  
.................... #fuses      H4 
.................... #fuses      NOFCMEN 
.................... #fuses      NOIESO 
.................... #fuses      NOPUT 
.................... #fuses      NOBROWNOUT 
.................... #fuses      NOWDT 
.................... #fuses      NOWINEN 
.................... #fuses      NOPWMPIN 
.................... #fuses      HPOL_HIGH 
.................... #fuses      LPOL_HIGH 
.................... #fuses      T1LOWPOWER 
.................... #fuses      FLTAD4 
.................... #fuses      SSP_RC 
.................... #fuses      NOPWMPIN 
.................... #fuses      MCLR 
.................... #fuses      NOLVP 
.................... #fuses      NODEBUG 
....................  
.................... #define     RX_PIN      PIN_C7 
.................... #define     TX_PIN      PIN_C6 
.................... #define     RS485_RW    PIN_C0 
....................  
.................... #use delay(clock = 40MHZ) 
017E:  CLRF   FEA
0180:  MOVLW  3E
0182:  MOVWF  FE9
0184:  MOVF   FEF,W
0186:  BZ    01A4
0188:  MOVLW  0C
018A:  MOVWF  01
018C:  CLRF   00
018E:  DECFSZ 00,F
0190:  BRA    018E
0192:  DECFSZ 01,F
0194:  BRA    018C
0196:  MOVLW  F7
0198:  MOVWF  00
019A:  DECFSZ 00,F
019C:  BRA    019A
019E:  BRA    01A0
01A0:  DECFSZ FEF,F
01A2:  BRA    0188
01A4:  GOTO   0260 (RETURN)
.................... #use rs232(xmit=TX_PIN, rcv=RX_PIN, enable=RS485_RW) 
*
0142:  BCF    F94.0
0144:  BSF    F8B.0
0146:  BTFSS  F9E.4
0148:  BRA    0146
014A:  BCF    F94.0
014C:  BSF    F8B.0
014E:  MOVFF  3F,FAD
0152:  NOP   
0154:  BTFSS  FAC.1
0156:  BRA    0154
0158:  BCF    F94.0
015A:  BCF    F8B.0
015C:  RETURN 0
....................   
.................... // UART Registers and bits 
.................... #byte TXSTA=0xFAC 
.................... #bit  BRGH=TXSTA.2 
.................... #bit  SYNC=TXSTA.4 
....................  
.................... #byte RCSTA=0xFAB 
.................... #bit  ADDEN=RCSTA.3 
.................... #bit  RX9=RCSTA.6 
....................  
.................... #byte BAUDCTL=0xFAA 
.................... #bit  BRG16=BAUDCTL.3 
....................  
.................... int16 SPBRG;  
.................... #locate SPBRG=0xFAF 
....................  
....................  
.................... #endif 
....................  
....................  
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_init(unsigned int, BYTE); 
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
.................... #include "uart.c" 
.................... /* 
....................  * File:   uart.c 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_init(unsigned int, BYTE); 
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
....................  
.................... //Defines 
.................... #define BUFFER_SIZE 32 
.................... #define uart_bkbhit (next_in!=next_out) 
.................... //Variables 
.................... BYTE uart_buffer[BUFFER_SIZE] = {0}; 
.................... BYTE next_in = 0; 
.................... BYTE next_out = 0; 
....................  
.................... #int_rda 
.................... void serial_isr() 
.................... { 
....................     int t; 
....................      
....................     uart_buffer[next_in] = getc(); 
*
00AE:  CLRF   03
00B0:  MOVF   39,W
00B2:  ADDLW  19
00B4:  MOVWF  FE9
00B6:  MOVLW  00
00B8:  ADDWFC 03,W
00BA:  MOVWF  FEA
00BC:  BTFSS  F9E.5
00BE:  BRA    00BC
00C0:  MOVFF  FAE,FEF
....................     t = next_in; 
00C4:  MOVFF  39,41
....................     next_in = (next_in + 1) % BUFFER_SIZE; 
00C8:  MOVLW  01
00CA:  ADDWF  39,W
00CC:  ANDLW  1F
00CE:  MOVWF  39
....................     if (next_in == next_out) 
00D0:  MOVF   3A,W
00D2:  SUBWF  39,W
00D4:  BNZ   00DA
....................         next_in = t;                                // Buffer full 
00D6:  MOVFF  41,39
00DA:  BCF    F9E.5
00DC:  GOTO   0060
.................... } 
.................... /** 
....................  * uart_bgetc, Function return one byte from uart circular buffer 
....................  * @return , first buffer that is written to the buffer 
....................  */ 
.................... BYTE uart_bgetc() 
.................... { 
....................     BYTE c; 
....................      
....................     //while(!uart_bkbhit);                          // This should be checked 
....................                                                     // in parser before state 
....................                                                     //machine is called 
....................     c = uart_buffer[next_out]; 
*
01A8:  CLRF   03
01AA:  MOVF   3A,W
01AC:  ADDLW  19
01AE:  MOVWF  FE9
01B0:  MOVLW  00
01B2:  ADDWFC 03,W
01B4:  MOVWF  FEA
01B6:  MOVFF  FEF,3D
....................     next_out = (next_out + 1) % BUFFER_SIZE; 
01BA:  MOVLW  01
01BC:  ADDWF  3A,W
01BE:  ANDLW  1F
01C0:  MOVWF  3A
....................     return (c); 
01C2:  MOVFF  3D,01
01C6:  GOTO   0276 (RETURN)
.................... } 
.................... /** 
....................  * uart_init, Function configure uart peripheral 
....................  * @param baudrate, Possible baudrates are: 1 - 19200, 2 - 115200, 3 - 256000 
....................  * @param dev_id, Device address used in RS485 communication 
....................  */ 
.................... void uart_init(unsigned int baudrate, BYTE dev_id) 
.................... { 
....................     unsigned long divisor; 
....................      
....................     switch (baudrate) 
*
0106:  MOVF   3D,W
0108:  XORLW  01
010A:  BZ    0116
010C:  XORLW  03
010E:  BZ    0120
0110:  XORLW  01
0112:  BZ    0128
0114:  BRA    012E
....................     { 
....................         case 1: 
....................             //setup_uart(19200); 
....................             divisor = 520; 
0116:  MOVLW  02
0118:  MOVWF  40
011A:  MOVLW  08
011C:  MOVWF  3F
....................             break; 
011E:  BRA    012E
....................         case 2: 
....................             //setup_uart(115200); 
....................             divisor = 85; 
0120:  CLRF   40
0122:  MOVLW  55
0124:  MOVWF  3F
....................             break; 
0126:  BRA    012E
....................         case 3: 
....................             //setup_uart(256000); 
....................             divisor = 38; 
0128:  CLRF   40
012A:  MOVLW  26
012C:  MOVWF  3F
....................             break; 
....................     } 
....................      
....................     // Switch to 16bit mode 
....................     SYNC = 0; 
012E:  BCF    FAC.4
....................     BRGH = 1; 
0130:  BSF    FAC.2
....................     BRG16 = 1; 
0132:  BSF    FAA.3
....................     // Select 9-bit reception 
....................     //RX9 = 0; 
....................     // Disable uart address detecion on receive 
....................     //ADDEN = 0; 
....................     // Configure uart speed 
....................     SPBRG = divisor; 
0134:  MOVFF  40,FB0
0138:  MOVFF  3F,FAF
....................     //setup_uart(UART_ADDRESS); 
....................     enable_interrupts(INT_RDA); 
013C:  BSF    F9D.5
013E:  GOTO   0248 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
01CA:  CLRF   FF8
01CC:  BCF    FD0.7
01CE:  BSF    07.7
01D0:  BCF    F94.0
01D2:  BCF    F8B.0
01D4:  BSF    FAA.3
01D6:  MOVLW  11
01D8:  MOVWF  FAF
01DA:  MOVLW  04
01DC:  MOVWF  FB0
01DE:  MOVLW  A6
01E0:  MOVWF  FAC
01E2:  MOVLW  90
01E4:  MOVWF  FAB
01E6:  CLRF   39
01E8:  CLRF   3A
01EA:  CLRF   3C
01EC:  CLRF   3B
01EE:  BCF    FB9.0
01F0:  BCF    FC1.6
01F2:  BCF    FC1.7
01F4:  MOVLW  00
01F6:  MOVWF  FB8
01F8:  BRA    0200
01FA:  DATA 20,40
01FC:  DATA 19,00
01FE:  DATA 00,00
0200:  MOVLW  00
0202:  MOVWF  FF8
0204:  MOVLW  01
0206:  MOVWF  FF7
0208:  MOVLW  FA
020A:  MOVWF  FF6
020C:  TBLRD*+
020E:  MOVF   FF5,W
0210:  MOVWF  00
0212:  XORLW  00
0214:  BZ    023C
0216:  TBLRD*+
0218:  MOVF   FF5,W
021A:  MOVWF  01
021C:  BTFSC  FE8.7
021E:  BRA    022A
0220:  ANDLW  0F
0222:  MOVWF  FEA
0224:  TBLRD*+
0226:  MOVFF  FF5,FE9
022A:  BTFSC  01.6
022C:  TBLRD*+
022E:  BTFSS  01.6
0230:  TBLRD*+
0232:  MOVFF  FF5,FEE
0236:  DCFSNZ 00,F
0238:  BRA    020C
023A:  BRA    022E
023C:  CLRF   FF8
.................... { 
....................     uart_init(2, 120);  
023E:  MOVLW  02
0240:  MOVWF  3D
0242:  MOVLW  78
0244:  MOVWF  3E
0246:  BRA    0106
....................     enable_interrupts(GLOBAL); 
0248:  MOVLW  C0
024A:  IORWF  FF2,F
....................      
....................     printf("\r\n\Running...\r\n"); 
024C:  MOVLW  E0
024E:  MOVWF  FF6
0250:  MOVLW  00
0252:  MOVWF  FF7
0254:  RCALL  015E
....................      
....................     while (1) 
....................     { 
....................         delay_ms(5000); 
0256:  MOVLW  14
0258:  MOVWF  3D
025A:  MOVLW  FA
025C:  MOVWF  3E
025E:  BRA    017E
0260:  DECFSZ 3D,F
0262:  BRA    025A
....................         printf("\r\nBuffered data => \r\n"); 
0264:  MOVLW  F0
0266:  MOVWF  FF6
0268:  MOVLW  00
026A:  MOVWF  FF7
026C:  RCALL  015E
....................         while (uart_bkbhit) 
026E:  MOVF   3A,W
0270:  SUBWF  39,W
0272:  BZ    0282
....................             putc(uart_bgetc()); 
0274:  BRA    01A8
0276:  MOVFF  01,3D
027A:  MOVFF  01,3F
027E:  RCALL  0142
0280:  BRA    026E
0282:  BRA    0256
....................     } 
.................... } 
....................  
0284:  BRA    0284

Configuration Fuses:
   Word  1: 0600   H4 NOFCMEN NOIESO
   Word  2: 3E0D   NOPUT NOBROWNOUT BORV20 NOWDT WDT32768 NOWINEN
   Word  3: 9C3C   NOPWMPIN LPOL_HIGH HPOL_HIGH T1LOWPOWER FLTAD4 SSP_RC PWM4B5 EXCLKC3 MCLR
   Word  4: 0001   STVREN NOLVP DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
