CCS PCH C Compiler, Version 5.045, 5967               25-Nov-15 01:27

               Filename:   F:\Dropbox (Personal)\Doktorat\GitRepository\MCA Driver\MCA-REVC.X\build\default\production\main.lst

               ROM used:   1436 bytes (9%)
                           Largest free fragment is 14944
               RAM used:   207 (27%) at main() level
                           222 (29%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   04D6
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0142
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   00C6
006C:  BTFSS  F9D.4
006E:  GOTO   0078
0072:  BTFSC  F9E.4
0074:  GOTO   0116
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVFF  15,FF5
00B2:  MOVFF  16,FF6
00B6:  MOVFF  17,FF7
00BA:  MOVF   04,W
00BC:  MOVFF  06,FE0
00C0:  MOVFF  05,FD8
00C4:  RETFIE 0
.................... /*  
....................  * File:   main.c 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #include "main.h" 
.................... /*  
....................  * File:   main.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #ifndef main_H 
.................... #define main_H 
....................  
.................... #include <18F4431.h> 
.................... //////////// Standard Header file for the PIC18F4431 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4431 
*
0156:  MOVFF  FEC,FFA
015A:  MOVF   FED,F
015C:  MOVFF  FEF,FE8
0160:  MOVWF  FF9
0162:  RETURN 0
0164:  DATA 4D,65
0166:  DATA 73,73
0168:  DATA 61,67
016A:  DATA 65,20
016C:  DATA 72,65
016E:  DATA 63,65
0170:  DATA 69,76
0172:  DATA 65,20
0174:  DATA 64,6F
0176:  DATA 6E,65
0178:  DATA 2E,0D
017A:  DATA 0A,00
017C:  DATA 41,64
017E:  DATA 64,72
0180:  DATA 65,73
0182:  DATA 73,20
0184:  DATA 68,61
0186:  DATA 6E,64
0188:  DATA 6C,65
018A:  DATA 72,20
018C:  DATA 63,61
018E:  DATA 6C,6C
0190:  DATA 65,64
0192:  DATA 2E,0D
0194:  DATA 0A,00
0196:  DATA 45,6E
0198:  DATA 61,62
019A:  DATA 6C,65
019C:  DATA 20,68
019E:  DATA 61,6E
01A0:  DATA 64,6C
01A2:  DATA 65,72
01A4:  DATA 20,63
01A6:  DATA 61,6C
01A8:  DATA 6C,65
01AA:  DATA 64,2E
01AC:  DATA 0D,0A
01AE:  DATA 00,00
01B0:  DATA 0D,0A
01B2:  DATA 52,75
01B4:  DATA 6E,6E
01B6:  DATA 69,6E
01B8:  DATA 67,2E
01BA:  DATA 2E,2E
01BC:  DATA 0D,0A
01BE:  DATA 00,00
*
0238:  TBLRD*+
023A:  MOVF   FF5,F
023C:  BZ    0256
023E:  MOVFF  FF6,D4
0242:  MOVFF  FF7,D5
0246:  MOVFF  FF5,D6
024A:  BRA    0200
024C:  MOVFF  D4,FF6
0250:  MOVFF  D5,FF7
0254:  BRA    0238
0256:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #device     ADC = 10  
.................... #fuses      H4 
.................... #fuses      NOFCMEN 
.................... #fuses      NOIESO 
.................... #fuses      NOPUT 
.................... #fuses      NOBROWNOUT 
.................... #fuses      NOWDT 
.................... #fuses      NOWINEN 
.................... #fuses      NOPWMPIN 
.................... #fuses      HPOL_HIGH 
.................... #fuses      LPOL_HIGH 
.................... #fuses      T1LOWPOWER 
.................... #fuses      FLTAD4 
.................... #fuses      SSP_RC 
.................... #fuses      NOPWMPIN 
.................... #fuses      MCLR 
.................... #fuses      NOLVP 
.................... #fuses      NODEBUG 
....................  
.................... #define     RX_PIN      PIN_C7 
.................... #define     TX_PIN      PIN_C6 
.................... #define     RS485_RW    PIN_C0 
....................  
.................... #use delay(clock = 40MHZ) 
.................... #use rs232(xmit=TX_PIN, rcv=RX_PIN, enable=RS485_RW) 
*
00F8:  BCF    F94.0
00FA:  BSF    F8B.0
00FC:  BTFSS  F9E.4
00FE:  BRA    00FC
0100:  BCF    F94.0
0102:  BSF    F8B.0
0104:  MOVFF  DC,FAD
0108:  NOP   
010A:  BTFSS  FAC.1
010C:  BRA    010A
010E:  BCF    F94.0
0110:  BCF    F8B.0
0112:  GOTO   0130 (RETURN)
....................   
.................... // UART Registers and bits 
.................... #byte TXSTA=0xFAC 
.................... #bit  BRGH=TXSTA.2 
.................... #bit  SYNC=TXSTA.4 
....................  
.................... #byte RCSTA=0xFAB 
.................... #bit  ADDEN=RCSTA.3 
.................... #bit  RX9=RCSTA.6 
....................  
.................... #byte BAUDCTL=0xFAA 
.................... #bit  BRG16=BAUDCTL.3 
....................  
.................... int16 SPBRG;  
.................... #locate SPBRG=0xFAF 
....................  
....................  
.................... #endif 
....................  
....................  
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_rcv_isr(void); 
.................... void serial_td_isr(void); 
.................... void timer1_overflow_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_bputc(BYTE); 
.................... void uart_init(unsigned int, BYTE); 
.................... /* Uart parser state machine states */ 
.................... void parse_uart_data(void);  
.................... void wait_for_start(void);  // Waits for the # character 
.................... void wait_for_adr(void);    // Wait for device address 
.................... void parse_id(void);        // Reads the 3 char identifier, stores it in data_id 
.................... void parse_length(void);    // Reads [LENGTH] field, stores it in data_length 
.................... void parse_data(void);      // Reads the data into data_buffer[] 
.................... void parse_crc(void);       // Reads the crc checksum (and checks the data) 
.................... void parse_end(void);       // End of data packet ($) handling.. start all over. 
.................... short crc_check(void);       
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
.................... #include "uart.c" 
.................... /******************************************************************************/ 
.................... /* File:   uart.c                                                             */ 
.................... /* Author: Miroslav Bozic                                                     */ 
.................... /*                                                                            */ 
.................... /* Library for UART receive and transmit data using custom protocol           */                           
.................... /* Data package structure:                                                    */ 
.................... /*   # [DEV_ADR] [MESSAGE_ID] [LENGTH] [DATA<0>,...DATA<LENGTH-1>] [CRC] $    */ 
.................... /* User parameters:                                                           */ 
.................... /*  UART_RX_TIMEOUT - UART RX timeout defined in ms (max 5ms)                 */ 
.................... /*  UART_BUFFER_SIZE - UART circular RX and TX buffers size                   */ 
.................... /*  DATA_BUFFER_SIZE - DATA buffer size                                       */ 
.................... /*                                                                            */ 
.................... /* User functions:                                                            */ 
.................... /* void uart_init(unsigned int baudrate, BYTE dev_id) - Must be called before */ 
.................... /* other function in library                                                  */ 
.................... /*                                                                            */ 
.................... /* void parse_uart_data() - call in while endless loop to start FSM parser    */ 
.................... /*                                                                            */ 
.................... /******************************************************************************/ 
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_rcv_isr(void); 
.................... void serial_td_isr(void); 
.................... void timer1_overflow_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_bputc(BYTE); 
.................... void uart_init(unsigned int, BYTE); 
.................... /* Uart parser state machine states */ 
.................... void parse_uart_data(void);  
.................... void wait_for_start(void);  // Waits for the # character 
.................... void wait_for_adr(void);    // Wait for device address 
.................... void parse_id(void);        // Reads the 3 char identifier, stores it in data_id 
.................... void parse_length(void);    // Reads [LENGTH] field, stores it in data_length 
.................... void parse_data(void);      // Reads the data into data_buffer[] 
.................... void parse_crc(void);       // Reads the crc checksum (and checks the data) 
.................... void parse_end(void);       // End of data packet ($) handling.. start all over. 
.................... short crc_check(void);       
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
....................  
.................... //Defines 
.................... #define UART_RX_TIMEOUT     1                   // Timeout in mS 
.................... #define TIMER1_REFRESH      (long)(65536 - (UART_RX_TIMEOUT * 10000)) 
.................... #define UART_BUFFER_SIZE    64 
.................... #define DATA_BUFFER_SIZE    32     
.................... #define uart_bkbhit (in.next_in!=in.next_out) 
....................  
.................... // Type definitions 
.................... typedef struct buffer 
.................... { 
....................     BYTE uart_buffer[UART_BUFFER_SIZE]; 
....................     BYTE next_in; 
....................     BYTE next_out; 
.................... } t_buffer; 
....................  
.................... typedef struct package 
.................... { 
....................     BYTE data_buffer[DATA_BUFFER_SIZE]; 
....................     BYTE dev_address; 
....................     BYTE ID; 
....................     BYTE data_length; 
....................     BYTE crc; 
.................... } t_package; 
....................  
.................... typedef void (*t_fptr)(void); 
.................... //Variables 
.................... //UART 
.................... t_buffer in = {{0}, 0, 0}; 
.................... t_buffer out = {{0}, 0, 0}; 
.................... //Message parser 
.................... t_package data = {{0}, 0, 0, 0}; 
.................... short NEW_MESSAGE_RECEIVE = FALSE; 
.................... //Pointer to a function that takes no parameters and returns nothing. 
.................... t_fptr parse_next = wait_for_start;          // Initialize the pointer to point to first state 
.................... int count = 0;                               // Variable used in parse_data function 
.................... // Functions 
.................... /** 
....................  * UART receive interrupt handler 
....................  */ 
.................... #int_rda 
.................... void serial_rcv_isr() 
.................... { 
....................     int t; 
....................      
....................     in.uart_buffer[in.next_in] = getc(); 
*
00C6:  CLRF   03
00C8:  MOVF   59,W
00CA:  ADDLW  19
00CC:  MOVWF  FE9
00CE:  MOVLW  00
00D0:  ADDWFC 03,W
00D2:  MOVWF  FEA
00D4:  BTFSS  F9E.5
00D6:  BRA    00D4
00D8:  MOVFF  FAE,FEF
....................     t = in.next_in; 
00DC:  MOVFF  59,DB
....................     in.next_in = (in.next_in + 1) % UART_BUFFER_SIZE; 
00E0:  MOVLW  01
00E2:  ADDWF  59,W
00E4:  ANDLW  3F
00E6:  MOVWF  59
....................     if (in.next_in == in.next_out) 
00E8:  MOVF   5A,W
00EA:  SUBWF  59,W
00EC:  BNZ   00F2
....................         in.next_in = t;                                // Buffer full 
00EE:  MOVFF  DB,59
.................... } 
.................... /** 
....................  * UART transmit interrupt handler 
....................  */ 
00F2:  BCF    F9E.5
00F4:  GOTO   0078
.................... #int_tbe 
.................... void serial_td_isr() 
.................... { 
....................     if (out.next_in != out.next_out) 
*
0116:  MOVF   x9C,W
0118:  SUBWF  x9B,W
011A:  BZ    013A
....................     { 
....................         putc(out.uart_buffer[out.next_out]); 
011C:  CLRF   03
011E:  MOVF   x9C,W
0120:  ADDLW  5B
0122:  MOVWF  FE9
0124:  MOVLW  00
0126:  ADDWFC 03,W
0128:  MOVWF  FEA
012A:  MOVFF  FEF,DC
012E:  BRA    00F8
....................         out.next_out = (out.next_out + 1) % UART_BUFFER_SIZE; 
0130:  MOVLW  01
0132:  ADDWF  x9C,W
0134:  ANDLW  3F
0136:  MOVWF  x9C
....................     } 
0138:  BRA    013C
....................     else 
....................         disable_interrupts(int_tbe); 
013A:  BCF    F9D.4
.................... } 
.................... /** 
....................  * TIMER1 overflow interrupt handler 
....................  */ 
013C:  BCF    F9E.4
013E:  GOTO   0078
.................... #int_timer1 
.................... void timer1_overflow_isr() 
.................... { 
....................     parse_next = wait_for_start; 
0142:  MOVLW  02
0144:  MOVWF  03
0146:  MOVLW  78
0148:  MOVWF  xC2
014A:  MOVFF  03,C3
....................     disable_interrupts(int_timer1); 
014E:  BCF    F9D.0
....................      
....................     /* Request for retransmission should be added here if it's needed */ 
....................     /* printf(uart_bputc, "Timeout occurred!\r\n");                  */ 
0150:  BCF    F9E.0
0152:  GOTO   0078
.................... } 
.................... /** 
....................  * uart_bgetc, Function return one byte from uart input buffer 
....................  * @return , first buffer that is written to the uart input buffer. 
....................  */ 
.................... BYTE uart_bgetc() 
.................... { 
....................     BYTE c; 
....................      
....................     c = in.uart_buffer[in.next_out]; 
*
0258:  CLRF   03
025A:  MOVF   5A,W
025C:  ADDLW  19
025E:  MOVWF  FE9
0260:  MOVLW  00
0262:  ADDWFC 03,W
0264:  MOVWF  FEA
0266:  MOVFF  FEF,D6
....................     in.next_out = (in.next_out + 1) % UART_BUFFER_SIZE; 
026A:  MOVLW  01
026C:  ADDWF  5A,W
026E:  ANDLW  3F
0270:  MOVWF  5A
....................     return (c); 
0272:  MOVFF  D6,01
0276:  RETURN 0
.................... } 
.................... /** 
....................  * bputc, Function add one byte to uart output buffer 
....................  * @param c, byte that will be added in uart output buffer. 
....................  */ 
.................... void uart_bputc(BYTE c) 
.................... { 
....................     short restart; 
....................     int ni; 
....................      
....................     restart = out.next_in == out.next_out; 
*
0200:  BCF    xD7.0
0202:  MOVF   x9C,W
0204:  SUBWF  x9B,W
0206:  BNZ   020A
0208:  BSF    xD7.0
....................     out.uart_buffer[out.next_in] = c; 
020A:  CLRF   03
020C:  MOVF   x9B,W
020E:  ADDLW  5B
0210:  MOVWF  FE9
0212:  MOVLW  00
0214:  ADDWFC 03,W
0216:  MOVWF  FEA
0218:  MOVFF  D6,FEF
....................     ni = (out.next_in + 1) % UART_BUFFER_SIZE; 
021C:  MOVLW  01
021E:  ADDWF  x9B,W
0220:  ANDLW  3F
0222:  MOVWF  xD8
....................     while(ni == out.next_out); 
0224:  MOVF   x9C,W
0226:  SUBWF  xD8,W
0228:  BZ    0224
....................     out.next_in = ni; 
022A:  MOVFF  D8,9B
....................     if (restart) 
022E:  BTFSS  xD7.0
0230:  BRA    0234
....................         enable_interrupts(int_tbe); 
0232:  BSF    F9D.4
0234:  GOTO   024C (RETURN)
.................... } 
.................... /** 
....................  * uart_init, Function configure uart peripheral 
....................  * @param baudrate, Possible baudrates are: 1 - 19200, 2 - 115200, 3 - 256000 
....................  * @param dev_id, Device address used in RS485 communication 
....................  */ 
.................... void uart_init(unsigned int baudrate, BYTE dev_id) 
.................... { 
....................     unsigned long divisor; 
....................      
....................     switch (baudrate) 
*
01C0:  MOVF   xCF,W
01C2:  XORLW  01
01C4:  BZ    01D0
01C6:  XORLW  03
01C8:  BZ    01DA
01CA:  XORLW  01
01CC:  BZ    01E2
01CE:  BRA    01E8
....................     { 
....................         case 1: 
....................             //setup_uart(19200); 
....................             divisor = 520; 
01D0:  MOVLW  02
01D2:  MOVWF  xD2
01D4:  MOVLW  08
01D6:  MOVWF  xD1
....................             break; 
01D8:  BRA    01E8
....................         case 2: 
....................             //setup_uart(115200); 
....................             divisor = 85; 
01DA:  CLRF   xD2
01DC:  MOVLW  55
01DE:  MOVWF  xD1
....................             break; 
01E0:  BRA    01E8
....................         case 3: 
....................             //setup_uart(256000); 
....................             divisor = 38; 
01E2:  CLRF   xD2
01E4:  MOVLW  26
01E6:  MOVWF  xD1
....................             break; 
....................     } 
....................      
....................     // Switch to 16bit mode 
....................     SYNC = 0; 
01E8:  BCF    FAC.4
....................     BRGH = 1; 
01EA:  BSF    FAC.2
....................     BRG16 = 1; 
01EC:  BSF    FAA.3
....................     // Select 9-bit reception 
....................     //RX9 = 0; 
....................     // Disable uart address detecion on receive 
....................     //ADDEN = 0; 
....................     // Configure uart speed 
....................     SPBRG = divisor; 
01EE:  MOVFF  D2,FB0
01F2:  MOVFF  D1,FAF
....................      
....................     // Timer 1 is used as timeout generator 
....................     // The time is defined using UART_RX_TIMEOUT 
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
01F6:  MOVLW  B5
01F8:  MOVWF  FCD
....................      
....................     enable_interrupts(INT_RDA); 
01FA:  BSF    F9D.5
01FC:  GOTO   0578 (RETURN)
.................... } 
.................... /** 
....................  * Function that call Finite State Machine parser 
....................  */ 
.................... void parse_uart_data() 
.................... { 
....................     (*parse_next)(); 
*
0428:  CLRF   FEA
042A:  MOVLW  C2
042C:  MOVWF  FE9
042E:  RCALL  0156
0430:  GOTO   0586 (RETURN)
.................... } 
.................... /** 
....................  * Function wait and check start character of a package 
....................  */ 
.................... void wait_for_start() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
*
0278:  MOVF   5A,W
027A:  SUBWF  59,W
027C:  BNZ   0280
....................         return; 
027E:  BRA    02AA
....................      
....................     /* If the data is start character, we update the state */ 
....................     if (uart_bgetc() == '#') 
0280:  RCALL  0258
0282:  MOVF   01,W
0284:  SUBLW  23
0286:  BNZ   02AA
....................     { 
....................         /* Initialize data variables, just in case */ 
....................         data.dev_address = 0; 
0288:  CLRF   xBD
....................         data.ID = 0; 
028A:  CLRF   xBE
....................         data.data_length = 0; 
028C:  CLRF   xBF
....................         data.crc = 0; 
028E:  CLRF   xC0
....................         count = 0; 
0290:  CLRF   xC4
....................         parse_next = wait_for_adr; // Next we parse the [ID] field 
0292:  MOVLW  02
0294:  MOVWF  03
0296:  MOVLW  AC
0298:  MOVWF  xC2
029A:  MOVFF  03,C3
....................          
....................         set_timer1(TIMER1_REFRESH); 
029E:  MOVLW  D8
02A0:  MOVWF  FCF
02A2:  MOVLW  F0
02A4:  MOVWF  FCE
....................         clear_interrupt(int_timer1); 
02A6:  BCF    F9E.0
....................         enable_interrupts(int_timer1); 
02A8:  BSF    F9D.0
....................     } 
02AA:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive address of a device that should response on message 
....................  */ 
.................... void wait_for_adr() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
02AC:  MOVF   5A,W
02AE:  SUBWF  59,W
02B0:  BNZ   02B4
....................         return; 
02B2:  BRA    02CE
....................      
....................     data.dev_address = uart_bgetc(); 
02B4:  RCALL  0258
02B6:  MOVFF  01,BD
....................     set_timer1(TIMER1_REFRESH); 
02BA:  MOVLW  D8
02BC:  MOVWF  FCF
02BE:  MOVLW  F0
02C0:  MOVWF  FCE
....................     parse_next = parse_id; 
02C2:  MOVLW  02
02C4:  MOVWF  03
02C6:  MOVLW  D0
02C8:  MOVWF  xC2
02CA:  MOVFF  03,C3
02CE:  RETURN 0
....................      
.................... } 
.................... /** 
....................  * Function receive package ID identifier 
....................  */ 
.................... void parse_id() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
02D0:  MOVF   5A,W
02D2:  SUBWF  59,W
02D4:  BNZ   02D8
....................         return; 
02D6:  BRA    02F2
....................      
....................     data.ID = uart_bgetc(); 
02D8:  RCALL  0258
02DA:  MOVFF  01,BE
....................     set_timer1(TIMER1_REFRESH); 
02DE:  MOVLW  D8
02E0:  MOVWF  FCF
02E2:  MOVLW  F0
02E4:  MOVWF  FCE
....................     parse_next = parse_length; 
02E6:  MOVLW  02
02E8:  MOVWF  03
02EA:  MOVLW  F4
02EC:  MOVWF  xC2
02EE:  MOVFF  03,C3
02F2:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive data length of a package 
....................  */ 
.................... void parse_length() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
02F4:  MOVF   5A,W
02F6:  SUBWF  59,W
02F8:  BNZ   02FC
....................         return; 
02FA:  BRA    0316
....................      
....................     data.data_length = uart_bgetc(); 
02FC:  RCALL  0258
02FE:  MOVFF  01,BF
....................     set_timer1(TIMER1_REFRESH); 
0302:  MOVLW  D8
0304:  MOVWF  FCF
0306:  MOVLW  F0
0308:  MOVWF  FCE
....................     parse_next = parse_data; 
030A:  MOVLW  03
030C:  MOVWF  03
030E:  MOVLW  18
0310:  MOVWF  xC2
0312:  MOVFF  03,C3
0316:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive data part of a package 
....................  */ 
.................... void parse_data() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
0318:  MOVF   5A,W
031A:  SUBWF  59,W
031C:  BNZ   0320
....................         return; 
031E:  BRA    0360
....................     /* Add received byte to the data_length variable. 
....................        The bytes arrive in Big Endian order. */ 
....................     data.data_buffer[count] = uart_bgetc(); 
0320:  CLRF   03
0322:  MOVF   xC4,W
0324:  ADDLW  9D
0326:  MOVWF  01
0328:  MOVLW  00
032A:  ADDWFC 03,F
032C:  MOVFF  01,D4
0330:  MOVFF  03,D5
0334:  RCALL  0258
0336:  MOVFF  D5,FEA
033A:  MOVFF  D4,FE9
033E:  MOVFF  01,FEF
....................     count++; 
0342:  INCF   xC4,F
....................     set_timer1(TIMER1_REFRESH); 
0344:  MOVLW  D8
0346:  MOVWF  FCF
0348:  MOVLW  F0
034A:  MOVWF  FCE
....................     /* State transition rule */ 
....................     if (count == data.data_length) 
034C:  MOVF   xBF,W
034E:  SUBWF  xC4,W
0350:  BNZ   0360
....................     { 
....................         count = 0;  // Reset counter 
0352:  CLRF   xC4
....................         parse_next = parse_crc; 
0354:  MOVLW  03
0356:  MOVWF  03
0358:  MOVLW  9E
035A:  MOVWF  xC2
035C:  MOVFF  03,C3
....................     } 
0360:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive and check CRC of a package 
....................  */ 
.................... void parse_crc() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
*
039E:  MOVF   5A,W
03A0:  SUBWF  59,W
03A2:  BNZ   03A6
....................         return; 
03A4:  BRA    03D4
....................      
....................     data.crc = uart_bgetc(); 
03A6:  RCALL  0258
03A8:  MOVFF  01,C0
....................     set_timer1(TIMER1_REFRESH); 
03AC:  MOVLW  D8
03AE:  MOVWF  FCF
03B0:  MOVLW  F0
03B2:  MOVWF  FCE
....................     // Check CRC 
....................     if (!crc_check()) 
03B4:  BRA    0362
03B6:  MOVF   01,F
03B8:  BNZ   03C8
....................     { 
....................         parse_next = wait_for_start; 
03BA:  MOVLW  02
03BC:  MOVWF  03
03BE:  MOVLW  78
03C0:  MOVWF  xC2
03C2:  MOVFF  03,C3
....................         /* Request for retransmission should be added here if it's needed */ 
....................         /* printf(uart_bputc, "CRC failed!\r\n");                        */ 
....................         return; 
03C6:  BRA    03D4
....................     } 
....................     parse_next = parse_end; 
03C8:  MOVLW  03
03CA:  MOVWF  03
03CC:  MOVLW  D6
03CE:  MOVWF  xC2
03D0:  MOVFF  03,C3
03D4:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive and check the last one character in a package 
....................  */ 
.................... void parse_end() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
03D6:  MOVF   5A,W
03D8:  SUBWF  59,W
03DA:  BNZ   03DE
....................         return; 
03DC:  BRA    040E
....................      
....................     disable_interrupts(int_timer1); 
03DE:  BCF    F9D.0
....................     // If last byte isn't stop character, something goes wrong in transmission 
....................     // and package will be rejected 
....................     if (uart_bgetc() != '$') 
03E0:  RCALL  0258
03E2:  MOVF   01,W
03E4:  SUBLW  24
03E6:  BZ    03F6
....................     { 
....................         parse_next = wait_for_start; 
03E8:  MOVLW  02
03EA:  MOVWF  03
03EC:  MOVLW  78
03EE:  MOVWF  xC2
03F0:  MOVFF  03,C3
....................         /* Request for retransmission should be added here if it's needed */ 
....................         /* printf(uart_bputc, "STOP character reception failed!\r\n");    */ 
....................         return; 
03F4:  BRA    040E
....................     } 
....................     parse_next = wait_for_start; 
03F6:  MOVLW  02
03F8:  MOVWF  03
03FA:  MOVLW  78
03FC:  MOVWF  xC2
03FE:  MOVFF  03,C3
....................     // Handle data 
....................     printf(uart_bputc, "Message receive done.\r\n"); 
0402:  MOVLW  64
0404:  MOVWF  FF6
0406:  MOVLW  01
0408:  MOVWF  FF7
040A:  RCALL  0238
....................     NEW_MESSAGE_RECEIVE = TRUE; 
040C:  BSF    xC1.0
040E:  RETURN 0
.................... } 
.................... /** 
....................  * Calculate and check CRC8 for received message 
....................  * @return TRUE if CRC check is valid or FALSE if CRC check is failed 
....................  */ 
.................... short crc_check() 
*
0362:  CLRF   xD5
.................... { 
....................     int i; 
....................     int crc8 = 0; 
....................     crc8 = crc8 ^ data.dev_address ^ data.ID ^ data.data_length; 
0364:  MOVF   xD5,W
0366:  XORWF  xBD,W
0368:  XORWF  xBE,W
036A:  XORWF  xBF,W
036C:  MOVWF  xD5
....................     for(i=0; i<data.data_length; i++) 
036E:  CLRF   xD4
0370:  MOVF   xBF,W
0372:  SUBWF  xD4,W
0374:  BC    038C
....................         crc8 = crc8 ^ data.data_buffer[i]; 
0376:  CLRF   03
0378:  MOVF   xD4,W
037A:  ADDLW  9D
037C:  MOVWF  FE9
037E:  MOVLW  00
0380:  ADDWFC 03,W
0382:  MOVWF  FEA
0384:  MOVF   FEF,W
0386:  XORWF  xD5,F
0388:  INCF   xD4,F
038A:  BRA    0370
....................      
....................     return crc8 == data.crc; 
038C:  MOVF   xC0,W
038E:  SUBWF  xD5,W
0390:  BZ    0396
0392:  MOVLW  00
0394:  BRA    0398
0396:  MOVLW  01
0398:  MOVWF  01
039A:  GOTO   03B6 (RETURN)
.................... } 
....................  
.................... #include "protocol.h" 
.................... /******************************************************************************/ 
.................... /* File:   protocol.h                                                         */ 
.................... /* Author: Miroslav Bozic                                                     */ 
.................... /******************************************************************************/ 
....................  
.................... #ifndef PROTOCOL_H 
.................... #define	PROTOCOL_H 
....................  
.................... //Function prototypes 
.................... int protocol_cmd_parse_request(BYTE); 
.................... void set_address_hdlr(void); 
.................... void drv_enable_hdlr(void); 
....................  
.................... #endif	/* PROTOCOL_H */ 
....................  
....................  
.................... #include "protocol.c" 
.................... /******************************************************************************/ 
.................... /* File:   protocol.c                                                         */ 
.................... /* Author: Miroslav Bozic                                                     */ 
.................... /*                                                                            */ 
.................... /*High level definition of a protocol messages and message parsing            */ 
.................... /******************************************************************************/ 
....................  
.................... #include "protocol.h" 
.................... /******************************************************************************/ 
.................... /* File:   protocol.h                                                         */ 
.................... /* Author: Miroslav Bozic                                                     */ 
.................... /******************************************************************************/ 
....................  
.................... #ifndef PROTOCOL_H 
.................... #define	PROTOCOL_H 
....................  
.................... //Function prototypes 
.................... int protocol_cmd_parse_request(BYTE); 
.................... void set_address_hdlr(void); 
.................... void drv_enable_hdlr(void); 
....................  
.................... #endif	/* PROTOCOL_H */ 
....................  
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_rcv_isr(void); 
.................... void serial_td_isr(void); 
.................... void timer1_overflow_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_bputc(BYTE); 
.................... void uart_init(unsigned int, BYTE); 
.................... /* Uart parser state machine states */ 
.................... void parse_uart_data(void);  
.................... void wait_for_start(void);  // Waits for the # character 
.................... void wait_for_adr(void);    // Wait for device address 
.................... void parse_id(void);        // Reads the 3 char identifier, stores it in data_id 
.................... void parse_length(void);    // Reads [LENGTH] field, stores it in data_length 
.................... void parse_data(void);      // Reads the data into data_buffer[] 
.................... void parse_crc(void);       // Reads the crc checksum (and checks the data) 
.................... void parse_end(void);       // End of data packet ($) handling.. start all over. 
.................... short crc_check(void);       
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
....................  
.................... // Type definitions 
.................... typedef void (*t_cmdHdlr)(void); 
....................  
.................... typedef enum 
.................... { 
....................     CMD_SET_ADDRESS = 0, 
....................     CMD_DRIVER_ENABLE = 1 
.................... } e_cmdID; 
....................  
.................... typedef struct cmd_info 
.................... { 
....................     e_cmdID cmd_id;             // Command ID 
....................     t_cmdHdlr   cmd_hdlr;       // Command handler 
.................... } t_cmd_info; 
....................  
.................... // Variables 
.................... t_cmdHdlr cmd_callback; 
....................  
.................... t_cmd_info cmd_hdlrs[] =  
.................... { 
....................     {CMD_SET_ADDRESS, set_address_hdlr}, 
....................     {CMD_DRIVER_ENABLE, drv_enable_hdlr} 
.................... }; 
....................  
.................... // Functions 
.................... int protocol_cmd_parse_request(BYTE msg_ID) 
*
0434:  CLRF   xD0
0436:  MOVLW  02
0438:  MOVWF  xD1
.................... { 
....................     int i=0; 
....................     // Get cmd_hdlrs_array length 
....................     int cmd_hdlrs_count = sizeof(cmd_hdlrs) / sizeof(cmd_hdlrs[0]); 
....................     // Find handler for given message ID 
....................     while(i < cmd_hdlrs_count && cmd_hdlrs[i].cmd_id != msg_ID) 
043A:  MOVF   xD1,W
043C:  SUBWF  xD0,W
043E:  BC    0464
0440:  MOVF   xD0,W
0442:  MULLW  03
0444:  MOVF   FF3,W
0446:  CLRF   xD3
0448:  MOVWF  xD2
044A:  MOVLW  C9
044C:  ADDWF  xD2,W
044E:  MOVWF  FE9
0450:  MOVLW  00
0452:  ADDWFC xD3,W
0454:  MOVWF  FEA
0456:  MOVLW  00
0458:  BTFSC  FEF.0
045A:  MOVLW  01
045C:  SUBWF  xCF,W
045E:  BZ    0464
....................         i++; 
0460:  INCF   xD0,F
0462:  BRA    043A
....................     // If there is no proper handler return error code -1 
....................     if (i == cmd_hdlrs_count) 
0464:  MOVF   xD1,W
0466:  SUBWF  xD0,W
0468:  BNZ   0470
....................         return -1; 
046A:  MOVLW  FF
046C:  MOVWF  01
046E:  BRA    04D2
....................     // Call handler to execute the command 
....................     cmd_callback = cmd_hdlrs[i].cmd_hdlr; 
0470:  MOVF   xD0,W
0472:  MULLW  03
0474:  MOVF   FF3,W
0476:  CLRF   xD3
0478:  MOVWF  xD2
047A:  MOVLW  01
047C:  ADDWF  xD2,W
047E:  MOVWF  01
0480:  MOVLW  00
0482:  ADDWFC xD3,W
0484:  MOVWF  03
0486:  MOVF   01,W
0488:  ADDLW  C9
048A:  MOVWF  FE9
048C:  MOVLW  00
048E:  ADDWFC 03,W
0490:  MOVWF  FEA
0492:  MOVFF  FEC,C8
0496:  MOVF   FED,F
0498:  MOVFF  FEF,C7
....................     //printf(uart_bputc, "Callback calling.\r\n"); 
....................     (*cmd_hdlrs[i].cmd_hdlr)(); 
049C:  MOVF   xD0,W
049E:  MULLW  03
04A0:  MOVF   FF3,W
04A2:  CLRF   xD3
04A4:  MOVWF  xD2
04A6:  MOVLW  01
04A8:  ADDWF  xD2,W
04AA:  MOVWF  01
04AC:  MOVLW  00
04AE:  ADDWFC xD3,W
04B0:  MOVWF  03
04B2:  MOVF   01,W
04B4:  ADDLW  C9
04B6:  MOVWF  01
04B8:  MOVLW  00
04BA:  ADDWFC 03,F
04BC:  MOVFF  01,D2
04C0:  MOVFF  03,D3
04C4:  MOVFF  03,FEA
04C8:  MOVFF  01,FE9
04CC:  RCALL  0156
....................      
....................     return 0; 
04CE:  MOVLW  00
04D0:  MOVWF  01
04D2:  GOTO   059A (RETURN)
.................... } 
.................... /** 
....................  * Function set new address of a device 
....................  */ 
.................... void set_address_hdlr() 
.................... { 
....................     printf(uart_bputc, "Address handler called.\r\n"); 
*
0410:  MOVLW  7C
0412:  MOVWF  FF6
0414:  MOVLW  01
0416:  MOVWF  FF7
0418:  RCALL  0238
041A:  RETURN 0
.................... } 
.................... /** 
....................  * Function enable IR2110 H bridge drivers output 
....................  */ 
.................... void drv_enable_hdlr() 
.................... { 
....................     printf(uart_bputc, "Enable handler called.\r\n"); 
041C:  MOVLW  96
041E:  MOVWF  FF6
0420:  MOVLW  01
0422:  MOVWF  FF7
0424:  RCALL  0238
0426:  RETURN 0
.................... } 
....................  
....................  
....................  
.................... void main() 
*
04D6:  CLRF   FF8
04D8:  BCF    FD0.7
04DA:  BSF    07.7
04DC:  BCF    F94.0
04DE:  BCF    F8B.0
04E0:  BSF    FAA.3
04E2:  MOVLW  11
04E4:  MOVWF  FAF
04E6:  MOVLW  04
04E8:  MOVWF  FB0
04EA:  MOVLW  A6
04EC:  MOVWF  FAC
04EE:  MOVLW  90
04F0:  MOVWF  FAB
04F2:  BCF    xC1.0
04F4:  MOVLW  02
04F6:  MOVWF  03
04F8:  MOVLW  78
04FA:  MOVWF  xC2
04FC:  MOVFF  03,C3
0500:  CLRF   xC4
0502:  CLRF   xC6
0504:  CLRF   xC5
0506:  BCF    FB9.0
0508:  BCF    FC1.6
050A:  BCF    FC1.7
050C:  MOVLW  00
050E:  MOVWF  FB8
0510:  MOVLW  04
0512:  MOVWF  xCB
0514:  MOVLW  10
0516:  MOVWF  xCA
0518:  MOVLW  04
051A:  MOVWF  xCE
051C:  MOVLW  1C
051E:  MOVWF  xCD
0520:  BRA    0530
0522:  DATA A8,40
0524:  DATA 19,00
0526:  DATA 01,00
0528:  DATA C9,00
052A:  DATA 01,00
052C:  DATA CC,01
052E:  DATA 00,00
0530:  MOVLW  00
0532:  MOVWF  FF8
0534:  MOVLW  05
0536:  MOVWF  FF7
0538:  MOVLW  22
053A:  MOVWF  FF6
053C:  TBLRD*+
053E:  MOVF   FF5,W
0540:  MOVWF  00
0542:  XORLW  00
0544:  BZ    056C
0546:  TBLRD*+
0548:  MOVF   FF5,W
054A:  MOVWF  01
054C:  BTFSC  FE8.7
054E:  BRA    055A
0550:  ANDLW  0F
0552:  MOVWF  FEA
0554:  TBLRD*+
0556:  MOVFF  FF5,FE9
055A:  BTFSC  01.6
055C:  TBLRD*+
055E:  BTFSS  01.6
0560:  TBLRD*+
0562:  MOVFF  FF5,FEE
0566:  DCFSNZ 00,F
0568:  BRA    053C
056A:  BRA    055E
056C:  CLRF   FF8
.................... { 
....................     uart_init(2, 120);  
056E:  MOVLW  02
0570:  MOVWF  xCF
0572:  MOVLW  78
0574:  MOVWF  xD0
0576:  BRA    01C0
....................     enable_interrupts(GLOBAL); 
0578:  MOVLW  C0
057A:  IORWF  FF2,F
....................      
....................     printf(uart_bputc, "\r\n\Running...\r\n"); 
057C:  MOVLW  B0
057E:  MOVWF  FF6
0580:  MOVLW  01
0582:  MOVWF  FF7
0584:  RCALL  0238
....................      
....................     while (1) 
....................     { 
....................         //delay_ms(5000); 
....................         //printf("\r\nBuffered data => \r\n"); 
....................         while (uart_bkbhit) 
0586:  MOVF   5A,W
0588:  SUBWF  59,W
058A:  BZ    0590
....................             parse_uart_data(); 
058C:  BRA    0428
058E:  BRA    0586
....................         if (NEW_MESSAGE_RECEIVE) 
0590:  BTFSS  xC1.0
0592:  BRA    059C
....................         { 
....................             protocol_cmd_parse_request(data.ID); 
0594:  MOVFF  BE,CF
0598:  BRA    0434
....................             NEW_MESSAGE_RECEIVE = FALSE; 
059A:  BCF    xC1.0
....................         } 
059C:  BRA    0586
....................     } 
.................... } 
....................  
059E:  SLEEP 

Configuration Fuses:
   Word  1: 0600   H4 NOFCMEN NOIESO
   Word  2: 3E0D   NOPUT NOBROWNOUT BORV20 NOWDT WDT32768 NOWINEN
   Word  3: 9C3C   NOPWMPIN LPOL_HIGH HPOL_HIGH T1LOWPOWER FLTAD4 SSP_RC PWM4B5 EXCLKC3 MCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
