CCS PCH C Compiler, Version 5.045, 5967               03-Dec-15 00:31

               Filename:   F:\Dropbox (Personal)\Doktorat\GitRepository\MCA Driver\MCA-REVC.X\build\default\production\main.lst

               ROM used:   1520 bytes (9%)
                           Largest free fragment is 14860
               RAM used:   211 (27%) at main() level
                           226 (29%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0516
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0142
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   00C6
006C:  BTFSS  F9D.4
006E:  GOTO   0078
0072:  BTFSC  F9E.4
0074:  GOTO   0116
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVFF  15,FF5
00B2:  MOVFF  16,FF6
00B6:  MOVFF  17,FF7
00BA:  MOVF   04,W
00BC:  MOVFF  06,FE0
00C0:  MOVFF  05,FD8
00C4:  RETFIE 0
.................... /*  
....................  * File:   main.c 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #include "main.h" 
.................... /*  
....................  * File:   main.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 19, 2015, 11:22 PM 
....................  */ 
....................  
.................... #ifndef main_H 
.................... #define main_H 
....................  
.................... #include <18F4431.h> 
.................... //////////// Standard Header file for the PIC18F4431 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4431 
*
0156:  MOVFF  FEC,FFA
015A:  MOVF   FED,F
015C:  MOVFF  FEF,FE8
0160:  MOVWF  FF9
0162:  RETURN 0
0164:  DATA 4D,65
0166:  DATA 73,73
0168:  DATA 61,67
016A:  DATA 65,20
016C:  DATA 72,65
016E:  DATA 63,65
0170:  DATA 69,76
0172:  DATA 65,20
0174:  DATA 64,6F
0176:  DATA 6E,65
0178:  DATA 2E,0D
017A:  DATA 0A,00
017C:  DATA 57,61
017E:  DATA 6B,65
0180:  DATA 75,70
0182:  DATA 20,68
0184:  DATA 61,6E
0186:  DATA 64,6C
0188:  DATA 65,72
018A:  DATA 20,63
018C:  DATA 61,6C
018E:  DATA 6C,65
0190:  DATA 64,2E
0192:  DATA 0D,0A
0194:  DATA 00,00
0196:  DATA 46,69
0198:  DATA 72,6D
019A:  DATA 77,61
019C:  DATA 72,65
019E:  DATA 20,76
01A0:  DATA 65,72
01A2:  DATA 73,69
01A4:  DATA 6F,6E
01A6:  DATA 20,68
01A8:  DATA 61,6E
01AA:  DATA 64,6C
01AC:  DATA 65,72
01AE:  DATA 20,63
01B0:  DATA 61,6C
01B2:  DATA 6C,65
01B4:  DATA 64,2E
01B6:  DATA 0D,0A
01B8:  DATA 00,00
01BA:  DATA 41,64
01BC:  DATA 64,72
01BE:  DATA 65,73
01C0:  DATA 73,20
01C2:  DATA 68,61
01C4:  DATA 6E,64
01C6:  DATA 6C,65
01C8:  DATA 72,20
01CA:  DATA 63,61
01CC:  DATA 6C,6C
01CE:  DATA 65,64
01D0:  DATA 2E,0D
01D2:  DATA 0A,00
01D4:  DATA 45,6E
01D6:  DATA 61,62
01D8:  DATA 6C,65
01DA:  DATA 20,68
01DC:  DATA 61,6E
01DE:  DATA 64,6C
01E0:  DATA 65,72
01E2:  DATA 20,63
01E4:  DATA 61,6C
01E6:  DATA 6C,65
01E8:  DATA 64,2E
01EA:  DATA 0D,0A
01EC:  DATA 00,00
*
03E4:  TBLRD*+
03E6:  MOVF   FF5,F
03E8:  BZ    0402
03EA:  MOVFF  FF6,D8
03EE:  MOVFF  FF7,D9
03F2:  MOVFF  FF5,DA
03F6:  BRA    03AC
03F8:  MOVFF  D8,FF6
03FC:  MOVFF  D9,FF7
0400:  BRA    03E4
0402:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #device     ADC = 10  
.................... #fuses      H4 
.................... #fuses      NOFCMEN 
.................... #fuses      NOIESO 
.................... #fuses      NOPUT 
.................... #fuses      NOBROWNOUT 
.................... #fuses      NOWDT 
.................... #fuses      NOWINEN 
.................... #fuses      NOPWMPIN 
.................... #fuses      HPOL_HIGH 
.................... #fuses      LPOL_HIGH 
.................... #fuses      T1LOWPOWER 
.................... #fuses      FLTAD4 
.................... #fuses      SSP_RC 
.................... #fuses      NOPWMPIN 
.................... #fuses      MCLR 
.................... #fuses      NOLVP 
.................... #fuses      NODEBUG 
....................  
.................... #define     RX_PIN      PIN_C7 
.................... #define     TX_PIN      PIN_C6 
.................... #define     RS485_RW    PIN_C0 
....................  
.................... #use delay(clock = 40MHZ) 
*
04EC:  CLRF   FEA
04EE:  MOVLW  D3
04F0:  MOVWF  FE9
04F2:  MOVF   FEF,W
04F4:  BZ    0512
04F6:  MOVLW  0C
04F8:  MOVWF  01
04FA:  CLRF   00
04FC:  DECFSZ 00,F
04FE:  BRA    04FC
0500:  DECFSZ 01,F
0502:  BRA    04FA
0504:  MOVLW  F7
0506:  MOVWF  00
0508:  DECFSZ 00,F
050A:  BRA    0508
050C:  BRA    050E
050E:  DECFSZ FEF,F
0510:  BRA    04F6
0512:  GOTO   05F0 (RETURN)
.................... #use rs232(xmit=TX_PIN, rcv=RX_PIN, enable=RS485_RW) 
*
00F8:  BCF    F94.0
00FA:  BSF    F8B.0
00FC:  BTFSS  F9E.4
00FE:  BRA    00FC
0100:  BCF    F94.0
0102:  BSF    F8B.0
0104:  MOVFF  E0,FAD
0108:  NOP   
010A:  BTFSS  FAC.1
010C:  BRA    010A
010E:  BCF    F94.0
0110:  BCF    F8B.0
0112:  GOTO   0130 (RETURN)
....................   
.................... // UART Registers and bits 
.................... #byte TXSTA=0xFAC 
.................... #bit  BRGH=TXSTA.2 
.................... #bit  SYNC=TXSTA.4 
....................  
.................... #byte RCSTA=0xFAB 
.................... #bit  ADDEN=RCSTA.3 
.................... #bit  RX9=RCSTA.6 
....................  
.................... #byte BAUDCTL=0xFAA 
.................... #bit  BRG16=BAUDCTL.3 
....................  
.................... int16 SPBRG;  
.................... #locate SPBRG=0xFAF 
....................  
....................  
.................... #endif 
....................  
....................  
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_rcv_isr(void); 
.................... void serial_td_isr(void); 
.................... void timer1_overflow_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_bputc(BYTE); 
.................... void uart_init(unsigned int, BYTE); 
.................... /* Uart parser state machine states */ 
.................... void parse_uart_data(void);  
.................... void wait_for_start(void);  // Waits for the # character 
.................... void wait_for_adr(void);    // Wait for device address 
.................... void parse_id(void);        // Reads the 3 char identifier, stores it in data_id 
.................... void parse_length(void);    // Reads [LENGTH] field, stores it in data_length 
.................... void parse_data(void);      // Reads the data into data_buffer[] 
.................... void parse_crc(void);       // Reads the crc checksum (and checks the data) 
.................... void parse_end(void);       // End of data packet ($) handling.. start all over. 
.................... short crc_check(void);       
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
.................... #include "uart.c" 
.................... /******************************************************************************/ 
.................... /* File:   uart.c                                                             */ 
.................... /* Author: Miroslav Bozic                                                     */ 
.................... /*                                                                            */ 
.................... /* Library for UART receive and transmit data using custom protocol           */                           
.................... /* Data package structure:                                                    */ 
.................... /*   # [DEV_ADR] [MESSAGE_ID] [LENGTH] [DATA<0>,...DATA<LENGTH-1>] [CRC] $    */ 
.................... /* User parameters:                                                           */ 
.................... /*  UART_RX_TIMEOUT - UART RX timeout defined in ms (max 5ms)                 */ 
.................... /*  UART_BUFFER_SIZE - UART circular RX and TX buffers size                   */ 
.................... /*  DATA_BUFFER_SIZE - DATA buffer size                                       */ 
.................... /*                                                                            */ 
.................... /* User functions:                                                            */ 
.................... /* void uart_init(unsigned int baudrate, BYTE dev_id) - Must be called before */ 
.................... /* other function in library                                                  */ 
.................... /*                                                                            */ 
.................... /* void parse_uart_data() - call in while endless loop to start FSM parser    */ 
.................... /*                                                                            */ 
.................... /******************************************************************************/ 
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_rcv_isr(void); 
.................... void serial_td_isr(void); 
.................... void timer1_overflow_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_bputc(BYTE); 
.................... void uart_init(unsigned int, BYTE); 
.................... /* Uart parser state machine states */ 
.................... void parse_uart_data(void);  
.................... void wait_for_start(void);  // Waits for the # character 
.................... void wait_for_adr(void);    // Wait for device address 
.................... void parse_id(void);        // Reads the 3 char identifier, stores it in data_id 
.................... void parse_length(void);    // Reads [LENGTH] field, stores it in data_length 
.................... void parse_data(void);      // Reads the data into data_buffer[] 
.................... void parse_crc(void);       // Reads the crc checksum (and checks the data) 
.................... void parse_end(void);       // End of data packet ($) handling.. start all over. 
.................... short crc_check(void);       
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
....................  
.................... //Defines 
.................... #define UART_RX_TIMEOUT     1                   // Timeout in mS 
.................... #define TIMER1_REFRESH      (long)(65536 - (UART_RX_TIMEOUT * 10000)) 
.................... #define UART_BUFFER_SIZE    64 
.................... #define DATA_BUFFER_SIZE    32     
.................... #define uart_bkbhit (in.next_in!=in.next_out) 
....................  
.................... // Type definitions 
.................... typedef struct buffer 
.................... { 
....................     BYTE uart_buffer[UART_BUFFER_SIZE]; 
....................     BYTE next_in; 
....................     BYTE next_out; 
.................... } t_buffer; 
....................  
.................... typedef struct package 
.................... { 
....................     BYTE data_buffer[DATA_BUFFER_SIZE]; 
....................     BYTE dev_address; 
....................     BYTE ID; 
....................     BYTE data_length; 
....................     BYTE crc; 
.................... } t_package; 
....................  
.................... typedef void (*t_fptr)(void); 
.................... //Variables 
.................... //UART 
.................... t_buffer in = {{0}, 0, 0}; 
.................... t_buffer out = {{0}, 0, 0}; 
.................... //Message parser 
.................... t_package data = {{0}, 0, 0, 0}; 
.................... short NEW_MESSAGE_RECEIVE = FALSE; 
.................... //Pointer to a function that takes no parameters and returns nothing. 
.................... t_fptr parse_next = wait_for_start;          // Initialize the pointer to point to first state 
.................... int count = 0;                               // Variable used in parse_data function 
.................... // Functions 
.................... /** 
....................  * UART receive interrupt handler 
....................  */ 
.................... #int_rda 
.................... void serial_rcv_isr() 
.................... { 
....................     int t; 
....................      
....................     in.uart_buffer[in.next_in] = getc(); 
*
00C6:  CLRF   03
00C8:  MOVF   59,W
00CA:  ADDLW  19
00CC:  MOVWF  FE9
00CE:  MOVLW  00
00D0:  ADDWFC 03,W
00D2:  MOVWF  FEA
00D4:  BTFSS  F9E.5
00D6:  BRA    00D4
00D8:  MOVFF  FAE,FEF
....................     t = in.next_in; 
00DC:  MOVFF  59,DF
....................     in.next_in = (in.next_in + 1) % UART_BUFFER_SIZE; 
00E0:  MOVLW  01
00E2:  ADDWF  59,W
00E4:  ANDLW  3F
00E6:  MOVWF  59
....................     if (in.next_in == in.next_out) 
00E8:  MOVF   5A,W
00EA:  SUBWF  59,W
00EC:  BNZ   00F2
....................         in.next_in = t;                                // Buffer full 
00EE:  MOVFF  DF,59
.................... } 
.................... /** 
....................  * UART transmit interrupt handler 
....................  */ 
00F2:  BCF    F9E.5
00F4:  GOTO   0078
.................... #int_tbe 
.................... void serial_td_isr() 
.................... { 
....................     if (out.next_in != out.next_out) 
*
0116:  MOVF   x9C,W
0118:  SUBWF  x9B,W
011A:  BZ    013A
....................     { 
....................         putc(out.uart_buffer[out.next_out]); 
011C:  CLRF   03
011E:  MOVF   x9C,W
0120:  ADDLW  5B
0122:  MOVWF  FE9
0124:  MOVLW  00
0126:  ADDWFC 03,W
0128:  MOVWF  FEA
012A:  MOVFF  FEF,E0
012E:  BRA    00F8
....................         out.next_out = (out.next_out + 1) % UART_BUFFER_SIZE; 
0130:  MOVLW  01
0132:  ADDWF  x9C,W
0134:  ANDLW  3F
0136:  MOVWF  x9C
....................     } 
0138:  BRA    013C
....................     else 
....................         disable_interrupts(int_tbe); 
013A:  BCF    F9D.4
.................... } 
.................... /** 
....................  * TIMER1 overflow interrupt handler 
....................  */ 
013C:  BCF    F9E.4
013E:  GOTO   0078
.................... #int_timer1 
.................... void timer1_overflow_isr() 
.................... { 
....................     parse_next = wait_for_start; 
0142:  MOVLW  02
0144:  MOVWF  03
0146:  MOVLW  4E
0148:  MOVWF  xC2
014A:  MOVFF  03,C3
....................     disable_interrupts(int_timer1); 
014E:  BCF    F9D.0
....................      
....................     /* Request for retransmission should be added here if it's needed */ 
....................     /* printf(uart_bputc, "Timeout occurred!\r\n");                  */ 
0150:  BCF    F9E.0
0152:  GOTO   0078
.................... } 
.................... /** 
....................  * uart_bgetc, Function return one byte from uart input buffer 
....................  * @return , first buffer that is written to the uart input buffer. 
....................  */ 
.................... BYTE uart_bgetc() 
.................... { 
....................     BYTE c; 
....................      
....................     c = in.uart_buffer[in.next_out]; 
*
022E:  CLRF   03
0230:  MOVF   5A,W
0232:  ADDLW  19
0234:  MOVWF  FE9
0236:  MOVLW  00
0238:  ADDWFC 03,W
023A:  MOVWF  FEA
023C:  MOVFF  FEF,DA
....................     in.next_out = (in.next_out + 1) % UART_BUFFER_SIZE; 
0240:  MOVLW  01
0242:  ADDWF  5A,W
0244:  ANDLW  3F
0246:  MOVWF  5A
....................     return (c); 
0248:  MOVFF  DA,01
024C:  RETURN 0
.................... } 
.................... /** 
....................  * bputc, Function add one byte to uart output buffer 
....................  * @param c, byte that will be added in uart output buffer. 
....................  */ 
.................... void uart_bputc(BYTE c) 
.................... { 
....................     short restart; 
....................     int ni; 
....................      
....................     restart = out.next_in == out.next_out; 
*
03AC:  BCF    xDB.0
03AE:  MOVF   x9C,W
03B0:  SUBWF  x9B,W
03B2:  BNZ   03B6
03B4:  BSF    xDB.0
....................     out.uart_buffer[out.next_in] = c; 
03B6:  CLRF   03
03B8:  MOVF   x9B,W
03BA:  ADDLW  5B
03BC:  MOVWF  FE9
03BE:  MOVLW  00
03C0:  ADDWFC 03,W
03C2:  MOVWF  FEA
03C4:  MOVFF  DA,FEF
....................     ni = (out.next_in + 1) % UART_BUFFER_SIZE; 
03C8:  MOVLW  01
03CA:  ADDWF  x9B,W
03CC:  ANDLW  3F
03CE:  MOVWF  xDC
....................     while(ni == out.next_out); 
03D0:  MOVF   x9C,W
03D2:  SUBWF  xDC,W
03D4:  BZ    03D0
....................     out.next_in = ni; 
03D6:  MOVFF  DC,9B
....................     if (restart) 
03DA:  BTFSS  xDB.0
03DC:  BRA    03E0
....................         enable_interrupts(int_tbe); 
03DE:  BSF    F9D.4
03E0:  GOTO   03F8 (RETURN)
.................... } 
.................... /** 
....................  * uart_init, Function configure uart peripheral 
....................  * @param baudrate, Possible baudrates are: 1 - 19200, 2 - 115200, 3 - 256000 
....................  * @param dev_id, Device address used in RS485 communication 
....................  */ 
.................... void uart_init(unsigned int baudrate, BYTE dev_id) 
.................... { 
....................     unsigned long divisor; 
....................      
....................     switch (baudrate) 
*
01EE:  MOVF   xD3,W
01F0:  XORLW  01
01F2:  BZ    01FE
01F4:  XORLW  03
01F6:  BZ    0208
01F8:  XORLW  01
01FA:  BZ    0210
01FC:  BRA    0216
....................     { 
....................         case 1: 
....................             //setup_uart(19200); 
....................             divisor = 520; 
01FE:  MOVLW  02
0200:  MOVWF  xD6
0202:  MOVLW  08
0204:  MOVWF  xD5
....................             break; 
0206:  BRA    0216
....................         case 2: 
....................             //setup_uart(115200); 
....................             divisor = 85; 
0208:  CLRF   xD6
020A:  MOVLW  55
020C:  MOVWF  xD5
....................             break; 
020E:  BRA    0216
....................         case 3: 
....................             //setup_uart(256000); 
....................             divisor = 38; 
0210:  CLRF   xD6
0212:  MOVLW  26
0214:  MOVWF  xD5
....................             break; 
....................     } 
....................      
....................     // Switch to 16bit mode 
....................     SYNC = 0; 
0216:  BCF    FAC.4
....................     BRGH = 1; 
0218:  BSF    FAC.2
....................     BRG16 = 1; 
021A:  BSF    FAA.3
....................     // Select 9-bit reception 
....................     //RX9 = 0; 
....................     // Disable uart address detecion on receive 
....................     //ADDEN = 0; 
....................     // Configure uart speed 
....................     SPBRG = divisor; 
021C:  MOVFF  D6,FB0
0220:  MOVFF  D5,FAF
....................      
....................     // Timer 1 is used as timeout generator 
....................     // The time is defined using UART_RX_TIMEOUT 
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
0224:  MOVLW  B5
0226:  MOVWF  FCD
....................      
....................     enable_interrupts(INT_RDA); 
0228:  BSF    F9D.5
022A:  GOTO   05D0 (RETURN)
.................... } 
.................... /** 
....................  * Function that call Finite State Machine parser 
....................  */ 
.................... void parse_uart_data() 
.................... { 
....................     (*parse_next)(); 
*
046E:  CLRF   FEA
0470:  MOVLW  C2
0472:  MOVWF  FE9
0474:  RCALL  0156
0476:  GOTO   05D4 (RETURN)
.................... } 
.................... /** 
....................  * Function wait and check start character of a package 
....................  */ 
.................... void wait_for_start() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
*
024E:  MOVF   5A,W
0250:  SUBWF  59,W
0252:  BNZ   0256
....................         return; 
0254:  BRA    0280
....................      
....................     /* If the data is start character, we update the state */ 
....................     if (uart_bgetc() == '#') 
0256:  RCALL  022E
0258:  MOVF   01,W
025A:  SUBLW  23
025C:  BNZ   0280
....................     { 
....................         /* Initialize data variables, just in case */ 
....................         data.dev_address = 0; 
025E:  CLRF   xBD
....................         data.ID = 0; 
0260:  CLRF   xBE
....................         data.data_length = 0; 
0262:  CLRF   xBF
....................         data.crc = 0; 
0264:  CLRF   xC0
....................         count = 0; 
0266:  CLRF   xC4
....................         parse_next = wait_for_adr; // Next we parse the [ID] field 
0268:  MOVLW  02
026A:  MOVWF  03
026C:  MOVLW  82
026E:  MOVWF  xC2
0270:  MOVFF  03,C3
....................          
....................         set_timer1(TIMER1_REFRESH); 
0274:  MOVLW  D8
0276:  MOVWF  FCF
0278:  MOVLW  F0
027A:  MOVWF  FCE
....................         clear_interrupt(int_timer1); 
027C:  BCF    F9E.0
....................         enable_interrupts(int_timer1); 
027E:  BSF    F9D.0
....................     } 
0280:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive address of a device that should response on message 
....................  */ 
.................... void wait_for_adr() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
0282:  MOVF   5A,W
0284:  SUBWF  59,W
0286:  BNZ   028A
....................         return; 
0288:  BRA    02A4
....................      
....................     data.dev_address = uart_bgetc(); 
028A:  RCALL  022E
028C:  MOVFF  01,BD
....................     set_timer1(TIMER1_REFRESH); 
0290:  MOVLW  D8
0292:  MOVWF  FCF
0294:  MOVLW  F0
0296:  MOVWF  FCE
....................     parse_next = parse_id; 
0298:  MOVLW  02
029A:  MOVWF  03
029C:  MOVLW  A6
029E:  MOVWF  xC2
02A0:  MOVFF  03,C3
02A4:  RETURN 0
....................      
.................... } 
.................... /** 
....................  * Function receive package ID identifier 
....................  */ 
.................... void parse_id() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
02A6:  MOVF   5A,W
02A8:  SUBWF  59,W
02AA:  BNZ   02AE
....................         return; 
02AC:  BRA    02C8
....................      
....................     data.ID = uart_bgetc(); 
02AE:  RCALL  022E
02B0:  MOVFF  01,BE
....................     set_timer1(TIMER1_REFRESH); 
02B4:  MOVLW  D8
02B6:  MOVWF  FCF
02B8:  MOVLW  F0
02BA:  MOVWF  FCE
....................     parse_next = parse_length; 
02BC:  MOVLW  02
02BE:  MOVWF  03
02C0:  MOVLW  CA
02C2:  MOVWF  xC2
02C4:  MOVFF  03,C3
02C8:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive data length of a package 
....................  */ 
.................... void parse_length() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
02CA:  MOVF   5A,W
02CC:  SUBWF  59,W
02CE:  BNZ   02D2
....................         return; 
02D0:  BRA    02EC
....................      
....................     data.data_length = uart_bgetc(); 
02D2:  RCALL  022E
02D4:  MOVFF  01,BF
....................     set_timer1(TIMER1_REFRESH); 
02D8:  MOVLW  D8
02DA:  MOVWF  FCF
02DC:  MOVLW  F0
02DE:  MOVWF  FCE
....................     parse_next = parse_data; 
02E0:  MOVLW  02
02E2:  MOVWF  03
02E4:  MOVLW  EE
02E6:  MOVWF  xC2
02E8:  MOVFF  03,C3
02EC:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive data part of a package 
....................  */ 
.................... void parse_data() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
02EE:  MOVF   5A,W
02F0:  SUBWF  59,W
02F2:  BNZ   02F6
....................         return; 
02F4:  BRA    0336
....................     /* Add received byte to the data_length variable. 
....................        The bytes arrive in Big Endian order. */ 
....................     data.data_buffer[count] = uart_bgetc(); 
02F6:  CLRF   03
02F8:  MOVF   xC4,W
02FA:  ADDLW  9D
02FC:  MOVWF  01
02FE:  MOVLW  00
0300:  ADDWFC 03,F
0302:  MOVFF  01,D8
0306:  MOVFF  03,D9
030A:  RCALL  022E
030C:  MOVFF  D9,FEA
0310:  MOVFF  D8,FE9
0314:  MOVFF  01,FEF
....................     count++; 
0318:  INCF   xC4,F
....................     set_timer1(TIMER1_REFRESH); 
031A:  MOVLW  D8
031C:  MOVWF  FCF
031E:  MOVLW  F0
0320:  MOVWF  FCE
....................     /* State transition rule */ 
....................     if (count == data.data_length) 
0322:  MOVF   xBF,W
0324:  SUBWF  xC4,W
0326:  BNZ   0336
....................     { 
....................         count = 0;  // Reset counter 
0328:  CLRF   xC4
....................         parse_next = parse_crc; 
032A:  MOVLW  03
032C:  MOVWF  03
032E:  MOVLW  74
0330:  MOVWF  xC2
0332:  MOVFF  03,C3
....................     } 
0336:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive and check CRC of a package 
....................  */ 
.................... void parse_crc() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
*
0374:  MOVF   5A,W
0376:  SUBWF  59,W
0378:  BNZ   037C
....................         return; 
037A:  BRA    03AA
....................      
....................     data.crc = uart_bgetc(); 
037C:  RCALL  022E
037E:  MOVFF  01,C0
....................     set_timer1(TIMER1_REFRESH); 
0382:  MOVLW  D8
0384:  MOVWF  FCF
0386:  MOVLW  F0
0388:  MOVWF  FCE
....................     // Check CRC 
....................     if (!crc_check()) 
038A:  BRA    0338
038C:  MOVF   01,F
038E:  BNZ   039E
....................     { 
....................         parse_next = wait_for_start; 
0390:  MOVLW  02
0392:  MOVWF  03
0394:  MOVLW  4E
0396:  MOVWF  xC2
0398:  MOVFF  03,C3
....................         /* Request for retransmission should be added here if it's needed */ 
....................         /* printf(uart_bputc, "CRC failed!\r\n");                        */ 
....................         return; 
039C:  BRA    03AA
....................     } 
....................     parse_next = parse_end; 
039E:  MOVLW  04
03A0:  MOVWF  03
03A2:  MOVLW  04
03A4:  MOVWF  xC2
03A6:  MOVFF  03,C3
03AA:  RETURN 0
.................... } 
.................... /** 
....................  * Function receive and check the last one character in a package 
....................  */ 
.................... void parse_end() 
.................... { 
....................     //* If there is no data available, return */ 
....................     if (!uart_bkbhit) 
*
0404:  MOVF   5A,W
0406:  SUBWF  59,W
0408:  BNZ   040C
....................         return; 
040A:  BRA    043C
....................      
....................     disable_interrupts(int_timer1); 
040C:  BCF    F9D.0
....................     // If last byte isn't stop character, something goes wrong in transmission 
....................     // and package will be rejected 
....................     if (uart_bgetc() != '$') 
040E:  RCALL  022E
0410:  MOVF   01,W
0412:  SUBLW  24
0414:  BZ    0424
....................     { 
....................         parse_next = wait_for_start; 
0416:  MOVLW  02
0418:  MOVWF  03
041A:  MOVLW  4E
041C:  MOVWF  xC2
041E:  MOVFF  03,C3
....................         /* Request for retransmission should be added here if it's needed */ 
....................         /* printf(uart_bputc, "STOP character reception failed!\r\n");    */ 
....................         return; 
0422:  BRA    043C
....................     } 
....................     parse_next = wait_for_start; 
0424:  MOVLW  02
0426:  MOVWF  03
0428:  MOVLW  4E
042A:  MOVWF  xC2
042C:  MOVFF  03,C3
....................     // Handle data 
....................     printf(uart_bputc, "Message receive done.\r\n"); 
0430:  MOVLW  64
0432:  MOVWF  FF6
0434:  MOVLW  01
0436:  MOVWF  FF7
0438:  RCALL  03E4
....................     NEW_MESSAGE_RECEIVE = TRUE; 
043A:  BSF    xC1.0
043C:  RETURN 0
.................... } 
.................... /** 
....................  * Calculate and check CRC8 for received message 
....................  * @return TRUE if CRC check is valid or FALSE if CRC check is failed 
....................  */ 
.................... short crc_check() 
*
0338:  CLRF   xD9
.................... { 
....................     int i; 
....................     int crc8 = 0; 
....................     crc8 = crc8 ^ data.dev_address ^ data.ID ^ data.data_length; 
033A:  MOVF   xD9,W
033C:  XORWF  xBD,W
033E:  XORWF  xBE,W
0340:  XORWF  xBF,W
0342:  MOVWF  xD9
....................     for(i=0; i<data.data_length; i++) 
0344:  CLRF   xD8
0346:  MOVF   xBF,W
0348:  SUBWF  xD8,W
034A:  BC    0362
....................         crc8 = crc8 ^ data.data_buffer[i]; 
034C:  CLRF   03
034E:  MOVF   xD8,W
0350:  ADDLW  9D
0352:  MOVWF  FE9
0354:  MOVLW  00
0356:  ADDWFC 03,W
0358:  MOVWF  FEA
035A:  MOVF   FEF,W
035C:  XORWF  xD9,F
035E:  INCF   xD8,F
0360:  BRA    0346
....................      
....................     return crc8 == data.crc; 
0362:  MOVF   xC0,W
0364:  SUBWF  xD9,W
0366:  BZ    036C
0368:  MOVLW  00
036A:  BRA    036E
036C:  MOVLW  01
036E:  MOVWF  01
0370:  GOTO   038C (RETURN)
.................... } 
....................  
.................... #include "protocol.h" 
.................... /******************************************************************************/ 
.................... /* File:   protocol.h                                                         */ 
.................... /* Author: Miroslav Bozic                                                     */ 
.................... /******************************************************************************/ 
....................  
.................... #ifndef PROTOCOL_H 
.................... #define	PROTOCOL_H 
....................  
.................... //Function prototypes 
.................... int protocol_cmd_parse_request(BYTE); 
.................... void wake_up_hdlr(void); 
.................... void get_firmware_version_hdlr(void); 
.................... void set_address_hdlr(void); 
.................... void set_drv_enable_hdlr(void); 
....................  
.................... #endif	/* PROTOCOL_H */ 
....................  
....................  
.................... #include "protocol.c" 
.................... /******************************************************************************/ 
.................... /* File:   protocol.c                                                         */ 
.................... /* Author: Miroslav Bozic                                                     */ 
.................... /*                                                                            */ 
.................... /*High level definition of a protocol messages and message parsing            */ 
.................... /******************************************************************************/ 
....................  
.................... #include "protocol.h" 
.................... /******************************************************************************/ 
.................... /* File:   protocol.h                                                         */ 
.................... /* Author: Miroslav Bozic                                                     */ 
.................... /******************************************************************************/ 
....................  
.................... #ifndef PROTOCOL_H 
.................... #define	PROTOCOL_H 
....................  
.................... //Function prototypes 
.................... int protocol_cmd_parse_request(BYTE); 
.................... void wake_up_hdlr(void); 
.................... void get_firmware_version_hdlr(void); 
.................... void set_address_hdlr(void); 
.................... void set_drv_enable_hdlr(void); 
....................  
.................... #endif	/* PROTOCOL_H */ 
....................  
....................  
.................... #include "uart.h" 
.................... /*  
....................  * File:   uart.h 
....................  * Author: Miroslav 
....................  * 
....................  * Created on November 20, 2015, 12:17 AM 
....................  */ 
....................  
.................... #ifndef UART_H 
.................... #define	UART_H 
....................  
.................... void serial_rcv_isr(void); 
.................... void serial_td_isr(void); 
.................... void timer1_overflow_isr(void); 
.................... BYTE uart_bgetc(void); 
.................... void uart_bputc(BYTE); 
.................... void uart_init(unsigned int, BYTE); 
.................... /* Uart parser state machine states */ 
.................... void parse_uart_data(void);  
.................... void wait_for_start(void);  // Waits for the # character 
.................... void wait_for_adr(void);    // Wait for device address 
.................... void parse_id(void);        // Reads the 3 char identifier, stores it in data_id 
.................... void parse_length(void);    // Reads [LENGTH] field, stores it in data_length 
.................... void parse_data(void);      // Reads the data into data_buffer[] 
.................... void parse_crc(void);       // Reads the crc checksum (and checks the data) 
.................... void parse_end(void);       // End of data packet ($) handling.. start all over. 
.................... short crc_check(void);       
....................  
.................... #endif	/* UART_H */ 
....................  
....................  
....................  
.................... // Type definitions 
.................... typedef void (*t_cmdHdlr)(void); 
....................  
.................... typedef enum 
.................... { 
....................     CMD_WAKE_UP = 0, 
....................     CMD_GET_FIRMWARE_VERSION, 
....................     CMD_SET_ADDRESS, 
....................     CMD_SET_DRV_ENABLE 
.................... } e_cmdID; 
....................  
.................... typedef struct cmd_info 
.................... { 
....................     e_cmdID cmd_id;             // Command ID 
....................     t_cmdHdlr   cmd_hdlr;       // Command handler 
.................... } t_cmd_info; 
....................  
.................... // Variables 
.................... t_cmd_info cmd_hdlrs[] =  
.................... { 
....................     {CMD_WAKE_UP, wake_up_hdlr}, 
....................     {CMD_GET_FIRMWARE_VERSION, get_firmware_version_hdlr}, 
....................     {CMD_SET_ADDRESS, set_address_hdlr}, 
....................     {CMD_SET_DRV_ENABLE, set_drv_enable_hdlr} 
.................... }; 
....................  
.................... // Functions 
.................... int protocol_cmd_parse_request(BYTE msg_ID) 
*
047A:  CLRF   xD4
047C:  MOVLW  04
047E:  MOVWF  xD5
.................... { 
....................     int i=0; 
....................     // Get cmd_hdlrs_array length 
....................     int cmd_hdlrs_count = sizeof(cmd_hdlrs) / sizeof(cmd_hdlrs[0]); 
....................     // Find handler for given message ID 
....................     while(i < cmd_hdlrs_count && cmd_hdlrs[i].cmd_id != msg_ID) 
0480:  MOVF   xD5,W
0482:  SUBWF  xD4,W
0484:  BC    04A6
0486:  MOVF   xD4,W
0488:  MULLW  03
048A:  MOVF   FF3,W
048C:  CLRF   xD7
048E:  MOVWF  xD6
0490:  MOVLW  C7
0492:  ADDWF  xD6,W
0494:  MOVWF  FE9
0496:  MOVLW  00
0498:  ADDWFC xD7,W
049A:  MOVWF  FEA
049C:  MOVF   xD3,W
049E:  SUBWF  FEF,W
04A0:  BZ    04A6
....................         i++; 
04A2:  INCF   xD4,F
04A4:  BRA    0480
....................     // If there is no proper handler return error code -1 
....................     if (i == cmd_hdlrs_count) 
04A6:  MOVF   xD5,W
04A8:  SUBWF  xD4,W
04AA:  BNZ   04B2
....................         return -1; 
04AC:  MOVLW  FF
04AE:  MOVWF  01
04B0:  BRA    04E8
....................     // Callback calling 
....................     //printf(uart_bputc, "Callback calling.\r\n"); 
....................     (*cmd_hdlrs[i].cmd_hdlr)(); 
04B2:  MOVF   xD4,W
04B4:  MULLW  03
04B6:  MOVF   FF3,W
04B8:  CLRF   xD7
04BA:  MOVWF  xD6
04BC:  MOVLW  01
04BE:  ADDWF  xD6,W
04C0:  MOVWF  01
04C2:  MOVLW  00
04C4:  ADDWFC xD7,W
04C6:  MOVWF  03
04C8:  MOVF   01,W
04CA:  ADDLW  C7
04CC:  MOVWF  01
04CE:  MOVLW  00
04D0:  ADDWFC 03,F
04D2:  MOVFF  01,D6
04D6:  MOVFF  03,D7
04DA:  MOVFF  03,FEA
04DE:  MOVFF  01,FE9
04E2:  RCALL  0156
....................      
....................     return 0; 
04E4:  MOVLW  00
04E6:  MOVWF  01
04E8:  GOTO   05E8 (RETURN)
.................... } 
.................... /** 
....................  * Return driver presentation on communication bus 
....................  */ 
.................... void wake_up_hdlr() 
.................... { 
....................     printf(uart_bputc, "Wakeup handler called.\r\n"); 
*
043E:  MOVLW  7C
0440:  MOVWF  FF6
0442:  MOVLW  01
0444:  MOVWF  FF7
0446:  RCALL  03E4
0448:  RETURN 0
.................... } 
.................... /** 
....................  * Return firmware version 
....................  */ 
.................... void get_firmware_version_hdlr() 
.................... { 
....................     printf(uart_bputc, "Firmware version handler called.\r\n"); 
044A:  MOVLW  96
044C:  MOVWF  FF6
044E:  MOVLW  01
0450:  MOVWF  FF7
0452:  RCALL  03E4
0454:  RETURN 0
.................... } 
.................... /** 
....................  * Set new address of a device 
....................  */ 
.................... void set_address_hdlr() 
.................... { 
....................     printf(uart_bputc, "Address handler called.\r\n"); 
0456:  MOVLW  BA
0458:  MOVWF  FF6
045A:  MOVLW  01
045C:  MOVWF  FF7
045E:  RCALL  03E4
0460:  RETURN 0
.................... } 
.................... /** 
....................  * Enable IR2110 H bridge drivers output 
....................  */ 
.................... void set_drv_enable_hdlr() 
.................... { 
....................     printf(uart_bputc, "Enable handler called.\r\n"); 
0462:  MOVLW  D4
0464:  MOVWF  FF6
0466:  MOVLW  01
0468:  MOVWF  FF7
046A:  RCALL  03E4
046C:  RETURN 0
.................... } 
....................  
....................  
....................  
.................... void main() 
*
0516:  CLRF   FF8
0518:  BCF    FD0.7
051A:  BSF    07.7
051C:  BCF    F94.0
051E:  BCF    F8B.0
0520:  BSF    FAA.3
0522:  MOVLW  11
0524:  MOVWF  FAF
0526:  MOVLW  04
0528:  MOVWF  FB0
052A:  MOVLW  A6
052C:  MOVWF  FAC
052E:  MOVLW  90
0530:  MOVWF  FAB
0532:  BCF    xC1.0
0534:  MOVLW  02
0536:  MOVWF  03
0538:  MOVLW  4E
053A:  MOVWF  xC2
053C:  MOVFF  03,C3
0540:  CLRF   xC4
0542:  CLRF   xC6
0544:  CLRF   xC5
0546:  BCF    FB9.0
0548:  BCF    FC1.6
054A:  BCF    FC1.7
054C:  MOVLW  00
054E:  MOVWF  FB8
0550:  MOVLW  04
0552:  MOVWF  xC9
0554:  MOVLW  3E
0556:  MOVWF  xC8
0558:  MOVLW  04
055A:  MOVWF  xCC
055C:  MOVLW  4A
055E:  MOVWF  xCB
0560:  MOVLW  04
0562:  MOVWF  xCF
0564:  MOVLW  56
0566:  MOVWF  xCE
0568:  MOVLW  04
056A:  MOVWF  xD2
056C:  MOVLW  62
056E:  MOVWF  xD1
0570:  BRA    0588
0572:  DATA A8,40
0574:  DATA 19,00
0576:  DATA 01,00
0578:  DATA C7,00
057A:  DATA 01,00
057C:  DATA CA,01
057E:  DATA 01,00
0580:  DATA CD,02
0582:  DATA 01,00
0584:  DATA D0,03
0586:  DATA 00,00
0588:  MOVLW  00
058A:  MOVWF  FF8
058C:  MOVLW  05
058E:  MOVWF  FF7
0590:  MOVLW  72
0592:  MOVWF  FF6
0594:  TBLRD*+
0596:  MOVF   FF5,W
0598:  MOVWF  00
059A:  XORLW  00
059C:  BZ    05C4
059E:  TBLRD*+
05A0:  MOVF   FF5,W
05A2:  MOVWF  01
05A4:  BTFSC  FE8.7
05A6:  BRA    05B2
05A8:  ANDLW  0F
05AA:  MOVWF  FEA
05AC:  TBLRD*+
05AE:  MOVFF  FF5,FE9
05B2:  BTFSC  01.6
05B4:  TBLRD*+
05B6:  BTFSS  01.6
05B8:  TBLRD*+
05BA:  MOVFF  FF5,FEE
05BE:  DCFSNZ 00,F
05C0:  BRA    0594
05C2:  BRA    05B6
05C4:  CLRF   FF8
.................... { 
....................     uart_init(2, 120);  
05C6:  MOVLW  02
05C8:  MOVWF  xD3
05CA:  MOVLW  78
05CC:  MOVWF  xD4
05CE:  BRA    01EE
....................     enable_interrupts(GLOBAL); 
05D0:  MOVLW  C0
05D2:  IORWF  FF2,F
....................      
....................     //printf(uart_bputc, "\r\n\Running...\r\n"); 
....................      
....................     while (1) 
....................     { 
....................         //delay_ms(5000); 
....................         //printf("\r\nBuffered data => \r\n"); 
....................         while (uart_bkbhit) 
05D4:  MOVF   5A,W
05D6:  SUBWF  59,W
05D8:  BZ    05DE
....................             parse_uart_data(); 
05DA:  BRA    046E
05DC:  BRA    05D4
....................         if (NEW_MESSAGE_RECEIVE) 
05DE:  BTFSS  xC1.0
05E0:  BRA    05EA
....................         { 
....................             protocol_cmd_parse_request(data.ID); 
05E2:  MOVFF  BE,D3
05E6:  BRA    047A
....................             NEW_MESSAGE_RECEIVE = FALSE; 
05E8:  BCF    xC1.0
....................         } 
....................          
....................          
....................         delay_ms(10); 
05EA:  MOVLW  0A
05EC:  MOVWF  xD3
05EE:  BRA    04EC
05F0:  BRA    05D4
....................     } 
.................... } 
....................  
05F2:  SLEEP 

Configuration Fuses:
   Word  1: 0600   H4 NOFCMEN NOIESO
   Word  2: 3E0D   NOPUT NOBROWNOUT BORV20 NOWDT WDT32768 NOWINEN
   Word  3: 9C3C   NOPWMPIN LPOL_HIGH HPOL_HIGH T1LOWPOWER FLTAD4 SSP_RC PWM4B5 EXCLKC3 MCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
