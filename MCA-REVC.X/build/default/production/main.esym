D G "__PCH__" 0 0 ""5.045""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""25-Nov-15""
D G "__TIME__" 0 0 ""01:27:39""
D G "_UNICODE" 0 0 ""?""
D G "__18F4431" 0 0 "1" "* File:   main.c"
C G "" 0 1 1 "*"
C G "" 0 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
D G "main_H" 1 9 ""
c L "set_tris_a" 2 1 6 "FUNCTION"
f N "set_tris_a" 2 44 ""
v L "value" 2 44 "int8" `54 
f B "set_tris_a" 2 44 "void(int8 value)" `53 
f N "set_tris_b" 2 45 ""
v L "value" 2 45 "int8" `56 
f B "set_tris_b" 2 45 "void(int8 value)" `55 
f N "set_tris_c" 2 46 ""
v L "value" 2 46 "int8" `58 
f B "set_tris_c" 2 46 "void(int8 value)" `57 
f N "set_tris_d" 2 47 ""
v L "value" 2 47 "int8" `60 
f B "set_tris_d" 2 47 "void(int8 value)" `59 
f N "set_tris_e" 2 48 ""
v L "value" 2 48 "int8" `62 
f B "set_tris_e" 2 48 "void(int8 value)" `61 
f N "get_tris_a" 2 49 ""
f B "get_tris_a" 2 49 "int8()" `63 
f N "get_tris_b" 2 50 ""
f B "get_tris_b" 2 50 "int8()" `64 
f N "get_tris_c" 2 51 ""
f B "get_tris_c" 2 51 "int8()" `65 
f N "get_tris_d" 2 52 ""
f B "get_tris_d" 2 52 "int8()" `66 
f N "get_tris_e" 2 53 ""
f B "get_tris_e" 2 53 "int8()" `67 
f N "output_a" 2 54 ""
v L "value" 2 54 "int8" `69 
f B "output_a" 2 54 "void(int8 value)" `68 
f N "output_b" 2 55 ""
v L "value" 2 55 "int8" `71 
f B "output_b" 2 55 "void(int8 value)" `70 
f N "output_c" 2 56 ""
v L "value" 2 56 "int8" `73 
f B "output_c" 2 56 "void(int8 value)" `72 
f N "output_d" 2 57 ""
v L "value" 2 57 "int8" `75 
f B "output_d" 2 57 "void(int8 value)" `74 
f N "output_e" 2 58 ""
v L "value" 2 58 "int8" `77 
f B "output_e" 2 58 "void(int8 value)" `76 
f N "input_a" 2 59 ""
f B "input_a" 2 59 "int8()" `78 
f N "input_b" 2 60 ""
f B "input_b" 2 60 "int8()" `79 
f N "input_c" 2 61 ""
f B "input_c" 2 61 "int8()" `80 
f N "input_d" 2 62 ""
f B "input_d" 2 62 "int8()" `81 
f N "input_e" 2 63 ""
f B "input_e" 2 63 "int8()" `82 
f N "input_change_a" 2 64 ""
f B "input_change_a" 2 64 "int8()" `83 
f N "input_change_b" 2 65 ""
f B "input_change_b" 2 65 "int8()" `84 
f N "input_change_c" 2 66 ""
f B "input_change_c" 2 66 "int8()" `85 
f N "input_change_d" 2 67 ""
f B "input_change_d" 2 67 "int8()" `86 
f N "input_change_e" 2 68 ""
f B "input_change_e" 2 68 "int8()" `87 
f N "port_b_pullups" 2 69 ""
v L "value" 2 69 "int8" `89 
f B "port_b_pullups" 2 69 "void(int8 value)" `88 
f N "input" 2 70 ""
v L "pin" 2 70 "int16" `91 
f B "input" 2 70 "int8(int16 pin)" `90 
f N "input_state" 2 71 ""
v L "pin" 2 71 "int16" `93 
f B "input_state" 2 71 "int8(int16 pin)" `92 
f N "output_low" 2 72 ""
v L "pin" 2 72 "int16" `95 
f B "output_low" 2 72 "void(int16 pin)" `94 
f N "output_high" 2 73 ""
v L "pin" 2 73 "int16" `97 
f B "output_high" 2 73 "void(int16 pin)" `96 
f N "output_toggle" 2 74 ""
v L "pin" 2 74 "int16" `99 
f B "output_toggle" 2 74 "void(int16 pin)" `98 
f N "output_bit" 2 75 ""
v L "pin" 2 75 "int16" `101 
v L "level" 2 75 "int8" `102 
f B "output_bit" 2 75 "void(int16 pin,int8 level)" `100 
f N "output_float" 2 76 ""
v L "pin" 2 76 "int16" `104 
f B "output_float" 2 76 "void(int16 pin)" `103 
f N "output_drive" 2 77 ""
v L "pin" 2 77 "int16" `106 
f B "output_drive" 2 77 "void(int16 pin)" `105  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 81 "31744"
d G "PIN_A1" 2 82 "31745"
d G "PIN_A2" 2 83 "31746"
d G "PIN_A3" 2 84 "31747"
d G "PIN_A4" 2 85 "31748"
d G "PIN_A5" 2 86 "31749"
d G "PIN_A6" 2 87 "31750"
d G "PIN_A7" 2 88 "31751"
d G "PIN_B0" 2 90 "31752"
d G "PIN_B1" 2 91 "31753"
d G "PIN_B2" 2 92 "31754"
d G "PIN_B3" 2 93 "31755"
d G "PIN_B4" 2 94 "31756"
d G "PIN_B5" 2 95 "31757"
d G "PIN_B6" 2 96 "31758"
d G "PIN_B7" 2 97 "31759"
d G "PIN_C0" 2 99 "31760"
d G "PIN_C1" 2 100 "31761"
d G "PIN_C2" 2 101 "31762"
d G "PIN_C3" 2 102 "31763"
d G "PIN_C4" 2 103 "31764"
d G "PIN_C5" 2 104 "31765"
d G "PIN_C6" 2 105 "31766"
d G "PIN_C7" 2 106 "31767"
d G "PIN_D0" 2 108 "31768"
d G "PIN_D1" 2 109 "31769"
d G "PIN_D2" 2 110 "31770"
d G "PIN_D3" 2 111 "31771"
d G "PIN_D4" 2 112 "31772"
d G "PIN_D5" 2 113 "31773"
d G "PIN_D6" 2 114 "31774"
d G "PIN_D7" 2 115 "31775"
d G "PIN_E0" 2 117 "31776"
d G "PIN_E1" 2 118 "31777"
d G "PIN_E2" 2 119 "31778"
d G "PIN_E3" 2 120 "31779"
d G "FALSE" 2 123 "0"
d G "TRUE" 2 124 "1"
d G "BYTE" 2 126 "int8"
d G "BOOLEAN" 2 127 "int1"
d G "getc" 2 129 "getch"
d G "fgetc" 2 130 "getch"
d G "getchar" 2 131 "getch"
d G "putc" 2 132 "putchar"
d G "fputc" 2 133 "putchar"
d G "fgets" 2 134 "gets"
d G "fputs" 2 135 "puts"
c L "output_drive" 2 1 3 "FUNCTION"
f N "restart_cause" 2 140 ""
f B "restart_cause" 2 140 "int8()" `107 
f N "reset_cpu" 2 141 ""
f B "reset_cpu" 2 141 "void()" `108 
f N "sleep" 2 142 ""
f B "sleep" 2 142 "void()" `109 
f N "sleep" 2 143 ""
v L "type" 2 143 "int8" `111 
f G "sleep" 2 143 "void(int8 type)" `110  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 145 "7"
d G "MCLR_FROM_SLEEP" 2 146 "11"
d G "MCLR_FROM_RUN" 2 147 "15"
d G "NORMAL_POWER_UP" 2 148 "12"
d G "BROWNOUT_RESTART" 2 149 "14"
d G "WDT_FROM_SLEEP" 2 150 "3"
d G "RESET_INSTRUCTION" 2 151 "0"
d G "SLEEP_FULL" 2 154 "0" "Default"
d G "SLEEP_IDLE" 2 155 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 5 "FUNCTION"
f N "setup_timer_0" 2 162 ""
v L "mode" 2 162 "int8" `113 
f B "setup_timer_0" 2 162 "void(int8 mode)" `112 
f N "set_timer0" 2 163 ""
v L "value" 2 163 "int16" `115 
f B "set_timer0" 2 163 "void(int16 value)" `114 
f N "get_timer0" 2 164 ""
f B "get_timer0" 2 164 "int16()" `116 
f N "setup_counters" 2 165 ""
v L "mode" 2 165 "int8" `118 
v L "prescaler" 2 165 "int8" `119 
f B "setup_counters" 2 165 "void(int8 mode,int8 prescaler)" `117 
f N "set_rtcc" 2 166 ""
v L "value" 2 166 "int16" `121 
f B "set_rtcc" 2 166 "void(int16 value)" `120 
f N "get_rtcc" 2 167 ""
f B "get_rtcc" 2 167 "int16()" `122  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 169 "0"
d G "T0_EXT_L_TO_H" 2 170 "32"
d G "T0_EXT_H_TO_L" 2 171 "48"
d G "T0_DIV_1" 2 173 "8"
d G "T0_DIV_2" 2 174 "0"
d G "T0_DIV_4" 2 175 "1"
d G "T0_DIV_8" 2 176 "2"
d G "T0_DIV_16" 2 177 "3"
d G "T0_DIV_32" 2 178 "4"
d G "T0_DIV_64" 2 179 "5"
d G "T0_DIV_128" 2 180 "6"
d G "T0_DIV_256" 2 181 "7"
d G "T0_OFF" 2 183 "0x80"
d G "T0_8_BIT" 2 185 "0x40"
d G "RTCC_INTERNAL" 2 187 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 188 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 189 "48"
d G "RTCC_DIV_1" 2 190 "8"
d G "RTCC_DIV_2" 2 191 "0"
d G "RTCC_DIV_4" 2 192 "1"
d G "RTCC_DIV_8" 2 193 "2"
d G "RTCC_DIV_16" 2 194 "3"
d G "RTCC_DIV_32" 2 195 "4"
d G "RTCC_DIV_64" 2 196 "5"
d G "RTCC_DIV_128" 2 197 "6"
d G "RTCC_DIV_256" 2 198 "7"
d G "RTCC_OFF" 2 199 "0x80"
d G "RTCC_8_BIT" 2 200 "0x40"
c L "get_rtcc" 2 1 8 "FUNCTION"
f N "setup_wdt" 2 211 ""
v L "mode" 2 211 "int16" `124 
f B "setup_wdt" 2 211 "void(int16 mode)" `123 
f N "restart_wdt" 2 212 ""
f B "restart_wdt" 2 212 "void()" `125  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 214 "0x100"
d G "WDT_OFF" 2 215 "0"
d G "WDT_4MS" 2 217 "0x300"
d G "WDT_8MS" 2 218 "0x500"
d G "WDT_16MS" 2 219 "0x700"
d G "WDT_32MS" 2 220 "0x900"
d G "WDT_64MS" 2 221 "0xB00"
d G "WDT_128MS" 2 222 "0xD00"
d G "WDT_256MS" 2 223 "0xF00"
d G "WDT_512MS" 2 224 "0x1100"
d G "WDT_1S" 2 225 "0x1300"
d G "WDT_2S" 2 226 "0x1500"
d G "WDT_4S" 2 227 "0x1700"
d G "WDT_8S" 2 228 "0x1900"
d G "WDT_16" 2 229 "0x1B00"
d G "WDT_32S" 2 230 "0x1D00"
d G "WDT_64S" 2 231 "0x1F00"
d G "WDT_128S" 2 232 "0x2100"
c L "restart_wdt" 2 1 3 "FUNCTION"
f N "setup_timer_1" 2 237 ""
v L "mode" 2 237 "int16" `127 
f B "setup_timer_1" 2 237 "void(int16 mode)" `126 
f N "get_timer1" 2 238 ""
f B "get_timer1" 2 238 "int16()" `128 
f N "set_timer1" 2 239 ""
v L "value" 2 239 "int16" `130 
f B "set_timer1" 2 239 "void(int16 value)" `129  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 242 "0"
d G "T1_INTERNAL" 2 243 "0x85"
d G "T1_EXTERNAL" 2 244 "0x87"
d G "T1_EXTERNAL_SYNC" 2 245 "0x83"
d G "T1_CLK_OUT" 2 247 "8"
d G "T1_DIV_BY_1" 2 249 "0"
d G "T1_DIV_BY_2" 2 250 "0x10"
d G "T1_DIV_BY_4" 2 251 "0x20"
d G "T1_DIV_BY_8" 2 252 "0x30"
c L "set_timer1" 2 1 3 "FUNCTION"
f N "setup_timer_2" 2 257 ""
v L "mode" 2 257 "int8" `132 
v L "period" 2 257 "int8" `133 
v L "postscale" 2 257 "int8" `134 
f B "setup_timer_2" 2 257 "void(int8 mode,int8 period,int8 postscale)" `131 
f N "get_timer2" 2 258 ""
f B "get_timer2" 2 258 "int8()" `135 
f N "set_timer2" 2 259 ""
v L "value" 2 259 "int8" `137 
f B "set_timer2" 2 259 "void(int8 value)" `136  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 261 "0"
d G "T2_DIV_BY_1" 2 262 "4"
d G "T2_DIV_BY_4" 2 263 "5"
d G "T2_DIV_BY_16" 2 264 "6"
c L "set_timer2" 2 1 3 "FUNCTION"
f N "setup_timer_5" 2 269 ""
v L "mode" 2 269 "int8" `139 
f B "setup_timer_5" 2 269 "void(int8 mode)" `138 
f N "get_timer5" 2 270 ""
f B "get_timer5" 2 270 "int16()" `140 
f N "set_timer5" 2 271 ""
v L "value" 2 271 "int16" `142 
f B "set_timer5" 2 271 "void(int16 value)" `141  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 2 274 "0"
d G "T5_INTERNAL" 2 275 "0x01"
d G "T5_EXTERNAL" 2 276 "0x07"
d G "T5_EXTERNAL_SYNC" 2 277 "0x03"
d G "T5_DIV_BY_1" 2 279 "0"
d G "T5_DIV_BY_2" 2 280 "0x08"
d G "T5_DIV_BY_4" 2 281 "0x10"
d G "T5_DIV_BY_8" 2 282 "0x18"
d G "T5_ONE_SHOT" 2 284 "0x20"
d G "T5_DISABLE_SE_RESET" 2 286 "0x40"
d G "T5_ENABLE_DURING_SLEEP" 2 288 "0x80"
c L "set_timer5" 2 1 4 "FUNCTION"
f N "setup_ccp1" 2 294 ""
v L "mode" 2 294 "int32" `144 
f B "setup_ccp1" 2 294 "void(int32 mode)" `143 
f N "setup_ccp1" 2 295 ""
v L "mode" 2 295 "int32" `146 
v L "pwm" 2 295 "int8" `147 
f G "setup_ccp1" 2 295 "void(int32 mode,int8 pwm)" `145 
f N "set_pwm1_duty" 2 296 ""
v L "value" 2 296 "int16" `149 
f B "set_pwm1_duty" 2 296 "void(int16 value)" `148  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 298 "0"
d G "CCP_CAPTURE_FE" 2 299 "0x04"
d G "CCP_CAPTURE_RE" 2 300 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 301 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 302 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 303 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 304 "0x09"
d G "CCP_COMPARE_INT" 2 305 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 306 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 307 "0x0B"
d G "CCP_PWM" 2 308 "0x0C"
d G "CCP_PWM_PLUS_1" 2 309 "0x1c"
d G "CCP_PWM_PLUS_2" 2 310 "0x2c"
d G "CCP_PWM_PLUS_3" 2 311 "0x3c"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
f N "setup_ccp2" 2 319 ""
v L "mode" 2 319 "int32" `154 
f B "setup_ccp2" 2 319 "void(int32 mode)" `153 
f N "setup_ccp2" 2 320 ""
v L "mode" 2 320 "int32" `156 
v L "pwm" 2 320 "int8" `157 
f G "setup_ccp2" 2 320 "void(int32 mode,int8 pwm)" `155 
f N "set_pwm2_duty" 2 321 ""
v L "value" 2 321 "int16" `159 
f B "set_pwm2_duty" 2 321 "void(int16 value)" `158 
c L "set_pwm2_duty" 2 1 3 "FUNCTION"
f N "setup_spi" 2 328 ""
v L "mode" 2 328 "int32" `164 
f B "setup_spi" 2 328 "void(int32 mode)" `163 
f N "spi_write" 2 329 ""
v L "value" 2 329 "int8" `166 
f B "spi_write" 2 329 "void(int8 value)" `165 
f N "spi_read" 2 330 ""
f B "spi_read" 2 330 "int8()" `167 
f N "spi_read" 2 331 ""
v L "value" 2 331 "int8" `169 
f G "spi_read" 2 331 "int8(int8 value)" `168 
f N "spi_data_in" 2 332 ""
f B "spi_data_in" 2 332 "int8()" `170  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 334 "0x00"
d G "SPI_MASTER" 2 335 "0x20"
d G "SPI_SLAVE" 2 336 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 337 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 338 "0x00"
d G "SPI_CLK_DIV_4" 2 339 "0x00"
d G "SPI_CLK_DIV_16" 2 340 "0x01"
d G "SPI_CLK_DIV_64" 2 341 "0x02"
d G "SPI_CLK_T2" 2 342 "0x03"
d G "SPI_SS_DISABLED" 2 343 "0x01"
d G "SPI_XMIT_L_TO_H" 2 345 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 346 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 348 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 349 "0x8000"
d G "SPI_L_TO_H" 2 352 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 353 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 1 2 "FUNCTION"
f N "setup_uart" 2 357 ""
v L "baud" 2 357 "int32" `172 
f B "setup_uart" 2 357 "void(int32 baud)" `171 
f N "setup_uart" 2 358 ""
v L "baud" 2 358 "int32" `174 
v L "stream" 2 358 "int8" `175 
f G "setup_uart" 2 358 "void(int32 baud,int8 stream)" `173 
f N "setup_uart" 2 359 ""
v L "baud" 2 359 "int32" `177 
v L "stream" 2 359 "int8" `178 
v L "clock" 2 359 "int32" `179 
f G "setup_uart" 2 359 "void(int32 baud,int8 stream,int32 clock)" `176 
f N "set_uart_speed" 2 360 ""
v L "baud" 2 360 "int32" `181 
f B "set_uart_speed" 2 360 "void(int32 baud)" `180 
f N "set_uart_speed" 2 361 ""
v L "baud" 2 361 "int32" `183 
v L "stream" 2 361 "int8" `184 
f G "set_uart_speed" 2 361 "void(int32 baud,int8 stream)" `182 
f N "set_uart_speed" 2 362 ""
v L "baud" 2 362 "int32" `186 
v L "stream" 2 362 "int8" `187 
v L "clock" 2 362 "int32" `188 
f G "set_uart_speed" 2 362 "void(int32 baud,int8 stream,int32 clock)" `185  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 366 "2"
d G "UART_DATA" 2 367 "4"
d G "UART_AUTODETECT" 2 368 "8"
d G "UART_AUTODETECT_NOWAIT" 2 369 "9"
d G "UART_WAKEUP_ON_RDA" 2 370 "10"
d G "UART_SEND_BREAK" 2 371 "13"
c L "set_uart_speed" 2 1 2 "FUNCTION"
f N "setup_low_volt_detect" 2 374 ""
v L "mode" 2 374 "int8" `190 
f B "setup_low_volt_detect" 2 374 "void(int8 mode)" `189  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 376 "0x1F"
d G "LVD_42" 2 377 "0x1E"
d G "LVD_39" 2 378 "0x1D"
d G "LVD_38" 2 379 "0x1C"
d G "LVD_36" 2 380 "0x1B"
d G "LVD_34" 2 381 "0x1A"
d G "LVD_33" 2 382 "0x19"
d G "LVD_31" 2 383 "0x18"
d G "LVD_28" 2 384 "0x17"
d G "LVD_27" 2 385 "0x16"
d G "LVD_26" 2 386 "0x15"
d G "LVD_24" 2 387 "0x14"
d G "LVD_23" 2 388 "0x13"
d G "LVD_21" 2 389 "0x12"
c L "setup_low_volt_detect" 2 1 4 "FUNCTION"
f N "setup_qei" 2 395 ""
v L "mode" 2 395 "int8" `192 
f B "setup_qei" 2 395 "void(int8 mode)" `191 
f N "setup_qei" 2 396 ""
v L "mode" 2 396 "int8" `194 
v L "filter" 2 396 "int8" `195 
f G "setup_qei" 2 396 "void(int8 mode,int8 filter)" `193 
f N "setup_qei" 2 397 ""
v L "mode" 2 397 "int8" `197 
v L "filter" 2 397 "int8" `198 
v L "max_count" 2 397 "int16" `199 
f G "setup_qei" 2 397 "void(int8 mode,int8 filter,int16 max_count)" `196 
f N "qei_set_count" 2 398 ""
v L "value" 2 398 "int16" `201 
f B "qei_set_count" 2 398 "void(int16 value)" `200 
f N "qei_get_count" 2 399 ""
f B "qei_get_count" 2 399 "int16()" `202 
f N "qei_get_count" 2 400 ""
v L "which" 2 400 "int8" `204 
f G "qei_get_count" 2 400 "int16(int8 which)" `203 
f N "qei_status" 2 401 ""
f B "qei_status" 2 401 "int8()" `205  "Constants used in setup_qei() first parameter are:"
d G "QEI_DISABLED" 2 403 "0x00"
d G "QEI_MODE_X2_RESET_WITH_INDX" 2 404 "0x04"
d G "QEI_MODE_X2_RESET_ON_MATCH" 2 405 "0x08"
d G "QEI_MODE_X4_RESET_WITH_INDX" 2 406 "0x14"
d G "QEI_MODE_X4_RESET_ON_MATCH" 2 407 "0x18"
d G "QEI_VELOCITY_MODE_ENABLED" 2 408 "0x00"
d G "QEI_VELOCITY_MODE_DISABLED" 2 409 "0x80"
d G "QEI_VELOCITY_PULSE_DIV_1" 2 410 "0x00"
d G "QEI_VELOCITY_PULSE_DIV_4" 2 411 "0x01"
d G "QEI_VELOCITY_PULSE_DIV_16" 2 412 "0x02"
d G "QEI_VELOCITY_PULSE_DIV_64" 2 413 "0x03"
d G "QEI_FILTER_DISABLED" 2 416 "0x00"
d G "QEI_FILTER_ENABLE_T5CKI" 2 417 "0x40"
d G "QEI_FILTER_ENABLE_QEB" 2 418 "0x20"
d G "QEI_FILTER_ENABLE_QEA" 2 419 "0x10"
d G "QEI_FILTER_ENABLE_INDX" 2 420 "0x08"
d G "QEI_FILTER_DIV_1" 2 421 "0x00"
d G "QEI_FILTER_DIV_2" 2 422 "0x01"
d G "QEI_FILTER_DIV_4" 2 423 "0x02"
d G "QEI_FILTER_DIV_16" 2 424 "0x03"
d G "QEI_FILTER_DIV_32" 2 425 "0x04"
d G "QEI_FILTER_DIV_64" 2 426 "0x05"
d G "QEI_FILTER_DIV_128" 2 427 "0x06"
d G "QEI_GET_POSITION_COUNT" 2 430 "0"
d G "QEI_GET_VELOCITY_COUNT" 2 431 "1"
d G "QEI_ERROR" 2 434 "0x40"
d G "QEI_FORWARD" 2 435 "0x20"
c L "qei_status" 2 1 2 "FUNCTION"
f N "setup_oscillator" 2 440 ""
v L "mode" 2 440 "int8" `207 
f B "setup_oscillator" 2 440 "int8(int8 mode)" `206 
f N "setup_oscillator" 2 441 ""
v L "mode" 2 441 "int8" `209 
v L "tune" 2 441 "sint8" `210 
f G "setup_oscillator" 2 441 "int8(int8 mode,sint8 tune)" `208  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 443 "0"
d G "OSC_125KHZ" 2 444 "0x10"
d G "OSC_250KHZ" 2 445 "0x20"
d G "OSC_500KHZ" 2 446 "0x30"
d G "OSC_1MHZ" 2 447 "0x40"
d G "OSC_2MHZ" 2 448 "0x50"
d G "OSC_4MHZ" 2 449 "0x60"
d G "OSC_8MHZ" 2 450 "0x70"
d G "OSC_TIMER1" 2 452 "1"
d G "OSC_INTRC" 2 453 "2"
d G "OSC_NORMAL" 2 454 "0"
d G "OSC_IDLE_MODE" 2 456 "0x80"
d G "OSC_STATE_STABLE" 2 460 "4"
d G "OSC_STATE_EXT_RUNNING" 2 461 "8"
c L "setup_oscillator" 2 1 4 "FUNCTION"
f N "setup_power_pwm" 2 467 ""
v L "mode" 2 467 "int32" `212 
v L "postscale" 2 467 "int8" `213 
v L "time_base" 2 467 "int16" `214 
v L "period" 2 467 "int16" `215 
v L "compare" 2 467 "int8" `216 
v L "compare_postscale" 2 467 "int8" `217 
v L "dead_time" 2 467 "int8" `218 
f B "setup_power_pwm" 2 467 "void(int32 mode,int8 postscale,int16 time_base,int16 period,int8 compare,int8 compare_postscale,int8 dead_time)" `211 
f N "set_power_pwm0_duty" 2 468 ""
v L "duty" 2 468 "int16" `220 
f B "set_power_pwm0_duty" 2 468 "void(int16 duty)" `219 
f N "set_power_pwm2_duty" 2 469 ""
v L "duty" 2 469 "int16" `222 
f B "set_power_pwm2_duty" 2 469 "void(int16 duty)" `221 
f N "set_power_pwm4_duty" 2 470 ""
v L "duty" 2 470 "int16" `224 
f B "set_power_pwm4_duty" 2 470 "void(int16 duty)" `223 
f N "set_power_pwm6_duty" 2 471 ""
v L "duty" 2 471 "int16" `226 
f B "set_power_pwm6_duty" 2 471 "void(int16 duty)" `225 
f N "setup_power_pwm_pins" 2 472 ""
v L "module0" 2 472 "int8" `228 
v L "module1" 2 472 "int8" `229 
v L "module2" 2 472 "int8" `230 
v L "module3" 2 472 "int8" `231 
f B "setup_power_pwm_pins" 2 472 "void(int8 module0,int8 module1,int8 module2,int8 module3)" `227 
f N "setup_power_pwm_faults" 2 473 ""
v L "mode" 2 473 "int8" `233 
f B "setup_power_pwm_faults" 2 473 "void(int8 mode)" `232  "Constants used for SETUP_POWER_PWM() are:"
d G "PWM_CLOCK_DIV_4" 2 475 "0x00"
d G "PWM_CLOCK_DIV_16" 2 476 "0x04"
d G "PWM_CLOCK_DIV_64" 2 477 "0x08"
d G "PWM_CLOCK_DIV_128" 2 478 "0x0C"
d G "PWM_DISABLED" 2 480 "0x0000"
d G "PWM_FREE_RUN" 2 481 "0x8000"
d G "PWM_SINGLE_SHOT" 2 482 "0x8001"
d G "PWM_UP_DOWN" 2 483 "0x8002"
d G "PWM_UP_DOWN_INT" 2 484 "0x8003"
d G "PWM_OVERRIDE_SYNC" 2 486 "0x10000"
d G "PWM_UP_TRIGGER" 2 488 "0x00000"
d G "PWM_DOWN_TRIGGER" 2 489 "0x80000"
d G "PWM_DEAD_CLOCK_DIV_2" 2 491 "0x000000"
d G "PWM_DEAD_CLOCK_DIV_4" 2 492 "0x100000"
d G "PWM_DEAD_CLOCK_DIV_8" 2 493 "0x200000"
d G "PWM_DEAD_CLOCK_DIV_16" 2 494 "0x300000"
d G "PWM_UPDATE_DISABLE" 2 497 "0x20000"
d G "PWM_UPDATE_ENABLE" 2 498 "0x00000"
d G "PWM_PINS_DISABLED" 2 501 "0"
d G "PWM_ODD_ON" 2 502 "1"
d G "PWM_BOTH_ON" 2 503 "2"
d G "PWM_COMPLEMENTARY" 2 504 "3"
d G "PWM_ENABLE_FLTA" 2 507 "0x01"
d G "PWM_AUTO_CLEAR_FLTA" 2 508 "0x02"
d G "PWM_FLTA_FLTB_ALL" 2 509 "0x08"
d G "PWM_ENABLE_FLTB" 2 510 "0x10"
d G "PWM_AUTO_CLEAR_FLTB" 2 511 "0x20"
d G "PWM_FAULT_ON_BREAKPOINT" 2 512 "0x80"
c L "setup_power_pwm_faults" 2 1 4 "FUNCTION"
f N "setup_adc" 2 522 ""
v L "mode" 2 522 "int32" `237 
f B "setup_adc" 2 522 "void(int32 mode)" `236 
f N "read_adc" 2 523 ""
f B "read_adc" 2 523 "int8()" `238 
f N "read_adc" 2 524 ""
v L "mode" 2 524 "int8" `240 
f G "read_adc" 2 524 "int8(int8 mode)" `239 
f N "read_adc" 2 525 ""
f G "read_adc" 2 525 "int16()" `241 
f N "read_adc" 2 526 ""
v L "mode" 2 526 "int8" `243 
f G "read_adc" 2 526 "int16(int8 mode)" `242 
f N "adc_done" 2 527 ""
f B "adc_done" 2 527 "int8()" `244  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 529 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 530 "0x1000000"
d G "ADC_CLOCK_DIV_4" 2 531 "0x0400"
d G "ADC_CLOCK_DIV_8" 2 532 "0x0100"
d G "ADC_CLOCK_DIV_16" 2 533 "0x0500"
d G "ADC_CLOCK_DIV_32" 2 534 "0x0200"
d G "ADC_CLOCK_DIV_64" 2 535 "0x0600"
d G "ADC_CLOCK_INTERNAL" 2 536 "0x0700" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 539 "0x0000"
d G "ADC_TAD_MUL_2" 2 540 "0x0800"
d G "ADC_TAD_MUL_4" 2 541 "0x1000"
d G "ADC_TAD_MUL_6" 2 542 "0x1800"
d G "ADC_TAD_MUL_8" 2 543 "0x2000"
d G "ADC_TAD_MUL_10" 2 544 "0x2800"
d G "ADC_TAD_MUL_12" 2 545 "0x3000"
d G "ADC_TAD_MUL_16" 2 546 "0x3800"
d G "ADC_TAD_MUL_20" 2 547 "0x4000"
d G "ADC_TAD_MUL_24" 2 548 "0x4800"
d G "ADC_TAD_MUL_28" 2 549 "0x5000"
d G "ADC_TAD_MUL_32" 2 550 "0x5800"
d G "ADC_TAD_MUL_36" 2 551 "0x6000"
d G "ADC_TAD_MUL_40" 2 552 "0x6800"
d G "ADC_TAD_MUL_48" 2 553 "0x7000"
d G "ADC_TAD_MUL_64" 2 554 "0x7800"
d G "ADC_SINGLE_SHOT_A" 2 557 "0x00" "Single conversion of Channels A"
d G "ADC_SINGLE_SHOT_B" 2 558 "0x04" "Single conversion of Channels B"
d G "ADC_SINGLE_SHOT_C" 2 559 "0x08" "Single conversion of Channels C"
d G "ADC_SINGLE_SHOT_D" 2 560 "0x0C" "Single conversion of Channels D"
d G "ADC_SINGLE_SHOT_A_B" 2 562 "0x10" "Single conversion of Channels A and B, sampling done sequentially"
d G "ADC_SINGLE_SHOT_A_B_C_D" 2 563 "0x14" "Single conversion of Channels A, B, C and D, sampling done sequentially"
d G "ADC_SINGLE_SHOT_AB" 2 564 "0x18" "Single conversion of Channels A and B, sampling done simultaneously"
d G "ADC_SINGLE_SHOT_AB_CD" 2 565 "0x1C" "Single conversion of Channels A, B, C and D, sampling A and B simultaneously then C and D simultaneously"
d G "ADC_CONT_A" 2 567 "0x20" "Channel A converted continuously"
d G "ADC_CONT_B" 2 568 "0x24" "Channel A converted continuously"
d G "ADC_CONT_C" 2 569 "0x28" "Channel A converted continuously"
d G "ADC_CONT_D" 2 570 "0x2C" "Channel A converted continuously"
d G "ADC_CONT_A_B" 2 572 "0x30" "Channels A and B converted continuously, sampling done sequentially"
d G "ADC_CONT_A_B_C_D" 2 573 "0x34" "Channels A, B, C and D converted continuously, sampling done sequentially"
d G "ADC_CONT_AB" 2 574 "0x38" "Channels A and B converted continuously, sampling done simultaneously"
d G "ADC_CONT_AB_CD" 2 575 "0x3C" "Channels A, B, C and D converted continuously, sampling A and B simultaneously then C and D simultaneously"
d G "ADC_FIFO_DISABLED" 2 578 "0x00000000" "ADC FIFO Buffer not used"
d G "ADC_FIFO_ENABLED" 2 579 "0x80000000" "ADC FIFO Buffer used, should be used if converting more then one channel or if continuous conversion"
d G "ADC_WHEN_INT0" 2 583 "0x010000"
d G "ADC_WHEN_TIMER5" 2 584 "0x020000"
d G "ADC_WHEN_IC1" 2 585 "0x040000"
d G "ADC_WHEN_CCP2" 2 586 "0x080000"
d G "ADC_WHEN_PPWM" 2 587 "0x100000"
d G "ADC_INT_EVERY_TIME" 2 590 "0x000000" "These options are"
d G "ADC_INT_EVERY_OTHER" 2 591 "0x400000" "ignored in single"
d G "ADC_INT_EVERY_FOUR" 2 592 "0x800000" "shot mode."
c L "adc_done" 2 1 3 "FUNCTION"
f N "setup_adc_ports" 2 598 ""
v L "pins" 2 598 "int32" `246 
f B "setup_adc_ports" 2 598 "void(int32 pins)" `245 
f N "setup_adc_ports" 2 599 ""
v L "pins" 2 599 "int32" `248 
v L "reference" 2 599 "int32" `249 
f G "setup_adc_ports" 2 599 "void(int32 pins,int32 reference)" `247 
f N "set_analog_pins" 2 600 ""
v L "pins" 2 600 "int32" `251 
f B "set_analog_pins" 2 600 "void(int32 pins)" `250 
f N "set_analog_pins" 2 601 ""
v L "pins" 2 601 "int32" `253 
v L "reference" 2 601 "int32" `254 
f G "set_analog_pins" 2 601 "void(int32 pins,int32 reference)" `252 
f N "set_adc_channel" 2 602 ""
v L "channel" 2 602 "int8" `256 
f B "set_adc_channel" 2 602 "void(int8 channel)" `255  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 2 606 "1" "| A0"
d G "sAN1" 2 607 "2" "| A1"
d G "sAN2" 2 608 "4" "| A2"
d G "sAN3" 2 609 "8" "| A3"
d G "sAN4" 2 610 "16" "| A4"
d G "sAN5" 2 611 "32" "| A5"
d G "sAN6" 2 612 "64" "| E0"
d G "sAN7" 2 613 "128" "| E1"
d G "sAN8" 2 614 "0x10000" "| E2"
d G "NO_ANALOGS" 2 615 "0" "None"
d G "ALL_ANALOG" 2 616 "0x100FF" "A0 A1 A2 A3 A4 A5 E0 E1 E2"
d G "VSS_VDD" 2 619 "0x0000" "| Range 0-Vdd"
d G "VREF_VREF" 2 620 "0xC000" "| Range VrefL-VrefH"
d G "VSS_VREF" 2 621 "0x4000" "| Range 0-VrefH"
d G "VREF_VDD" 2 622 "0x8000" "| Range VrefL-Vdd"
d G "ADC_START_AND_READ" 2 625 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 626 "1"
d G "ADC_READ_ONLY" 2 627 "6"
d G "ADC_READ_ONLY_FROM_INT" 2 628 "4"
c L "set_adc_channel" 2 1 3 "FUNCTION"
f N "abs" 2 634 ""
v L "x" 2 634 "sint8" `258 
f B "abs" 2 634 "sint8(sint8 x)" `257 
f N "abs" 2 635 ""
v L "x" 2 635 "sint16" `260 
f G "abs" 2 635 "sint16(sint16 x)" `259 
f N "abs" 2 636 ""
v L "x" 2 636 "sint32" `262 
f G "abs" 2 636 "sint32(sint32 x)" `261 
f N "abs" 2 637 ""
v L "x" 2 637 "float" `264 
f G "abs" 2 637 "float(float x)" `263 
f N "_mul" 2 638 ""
v L "??65535" 2 638 "int8" `266 
v L "??65535" 2 638 "int8" `267 
f B "_mul" 2 638 "int16(int8 ,int8 )" `265 
f N "_mul" 2 639 ""
v L "??65535" 2 639 "sint8" `266 
v L "??65535" 2 639 "sint8" `270 
f G "_mul" 2 639 "sint16(sint8 ,sint8 )" `268 
f N "_mul" 2 640 ""
v L "??65535" 2 640 "int16" `266 
v L "??65535" 2 640 "int16" `273 
f G "_mul" 2 640 "int32(int16 ,int16 )" `271 
f N "_mul" 2 641 ""
v L "??65535" 2 641 "sint16" `266 
v L "??65535" 2 641 "sint16" `276 
f G "_mul" 2 641 "sint32(sint16 ,sint16 )" `274  "Memory Manipulation Prototypes:"
f N "read_bank" 2 644 ""
v L "bank" 2 644 "int8" `278 
v L "offset" 2 644 "int8" `279 
f B "read_bank" 2 644 "int8(int8 bank,int8 offset)" `277 
f N "write_bank" 2 645 ""
v L "bank" 2 645 "int8" `281 
v L "offset" 2 645 "int8" `282 
v L "value" 2 645 "int8" `283 
f B "write_bank" 2 645 "void(int8 bank,int8 offset,int8 value)" `280 
f N "strcpy" 2 646 ""
v L "dest" 2 646 "*int8" `285 
v L "src" 2 646 "*int8" `286 
f B "strcpy" 2 646 "void(*int8 dest,*int8 src)" `284 
f N "memset" 2 647 ""
v L "destination" 2 647 "*int8" `288 
v L "value" 2 647 "int8" `289 
v L "num" 2 647 "int16" `290 
f B "memset" 2 647 "void(*int8 destination,int8 value,int16 num)" `287 
f N "memcpy" 2 648 ""
v L "destination" 2 648 "*int8" `292 
v L "source" 2 648 "*int8" `293 
v L "num" 2 648 "int16" `294 
f B "memcpy" 2 648 "void(*int8 destination,*int8 source,int16 num)" `291  "String Prototypes:"
f N "toupper" 2 651 ""
v L "cvalue" 2 651 "int8" `296 
f B "toupper" 2 651 "int8(int8 cvalue)" `295 
f N "tolower" 2 652 ""
v L "cvalue" 2 652 "int8" `298 
f B "tolower" 2 652 "int8(int8 cvalue)" `297 
f N "sprintf" 2 653 ""
v L "string" 2 653 "*int8" `300 
v L "cstring" 2 653 "*int8" `301 
f B "sprintf" 2 653 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `299  "Data Manipulators Prototypes:"
f N "shift_left" 2 656 ""
v L "address" 2 656 "*int8" `304 
v L "bytes" 2 656 "int8" `305 
v L "value" 2 656 "int8" `306 
f B "shift_left" 2 656 "int8(*int8 address,int8 bytes,int8 value)" `303 
f N "shift_right" 2 657 ""
v L "address" 2 657 "*int8" `308 
v L "bytes" 2 657 "int8" `309 
v L "value" 2 657 "int8" `310 
f B "shift_right" 2 657 "int8(*int8 address,int8 bytes,int8 value)" `307 
f N "rotate_left" 2 658 ""
v L "address" 2 658 "*int8" `312 
v L "bytes" 2 658 "int8" `313 
f B "rotate_left" 2 658 "void(*int8 address,int8 bytes)" `311 
f N "rotate_right" 2 659 ""
v L "address" 2 659 "*int8" `315 
v L "bytes" 2 659 "int8" `316 
f B "rotate_right" 2 659 "void(*int8 address,int8 bytes)" `314 
f N "swap" 2 660 ""
v L "value" 2 660 "int8" `318 
f B "swap" 2 660 "void(int8 value)" `317 
f N "make8" 2 661 ""
v L "var" 2 661 "int16" `320 
v L "offset" 2 661 "int8" `321 
f B "make8" 2 661 "int8(int16 var,int8 offset)" `319 
f N "make8" 2 662 ""
v L "var" 2 662 "int32" `320 
v L "offset" 2 662 "int8" `324 
f G "make8" 2 662 "int8(int32 var,int8 offset)" `322 
f N "make16" 2 663 ""
v L "varhigh" 2 663 "int8" `326 
v L "varlow" 2 663 "int8" `327 
f B "make16" 2 663 "int16(int8 varhigh,int8 varlow)" `325 
f N "make32" 2 664 ""
v L "var1" 2 664 "int16" `329 
f B "make32" 2 664 "int32(int16 var1)" `328 
f N "make32" 2 665 ""
v L "var1" 2 665 "int16" `331 
v L "var2" 2 665 "int16" `332 
f G "make32" 2 665 "int32(int16 var1,int16 var2)" `330 
f N "make32" 2 666 ""
v L "var1" 2 666 "int16" `331 
v L "var2" 2 666 "int8" `335 
f G "make32" 2 666 "int32(int16 var1,int8 var2)" `333 
f N "make32" 2 667 ""
v L "var1" 2 667 "int16" `337 
v L "var2" 2 667 "int8" `338 
v L "var3" 2 667 "int8" `339 
f G "make32" 2 667 "int32(int16 var1,int8 var2,int8 var3)" `336 
f N "make32" 2 668 ""
v L "var1" 2 668 "int8" `341 
f G "make32" 2 668 "int32(int8 var1)" `340 
f N "make32" 2 669 ""
v L "var1" 2 669 "int8" `331 
v L "var2" 2 669 "int8" `344 
f G "make32" 2 669 "int32(int8 var1,int8 var2)" `342 
f N "make32" 2 670 ""
v L "var1" 2 670 "int8" `337 
v L "var2" 2 670 "int8" `338 
v L "var3" 2 670 "int8" `348 
f G "make32" 2 670 "int32(int8 var1,int8 var2,int8 var3)" `345 
f N "make32" 2 671 ""
v L "var1" 2 671 "int8" `350 
v L "var2" 2 671 "int8" `351 
v L "var3" 2 671 "int8" `352 
v L "var4" 2 671 "int8" `353 
f G "make32" 2 671 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `349 
f N "make32" 2 672 ""
v L "var1" 2 672 "int8" `331 
v L "var2" 2 672 "int16" `356 
f G "make32" 2 672 "int32(int8 var1,int16 var2)" `354 
f N "make32" 2 673 ""
v L "var1" 2 673 "int8" `337 
v L "var2" 2 673 "int16" `338 
v L "var3" 2 673 "int8" `360 
f G "make32" 2 673 "int32(int8 var1,int16 var2,int8 var3)" `357 
f N "make32" 2 674 ""
v L "var1" 2 674 "int8" `337 
v L "var2" 2 674 "int8" `338 
v L "var3" 2 674 "int16" `364 
f G "make32" 2 674 "int32(int8 var1,int8 var2,int16 var3)" `361 
f N "bit_set" 2 675 ""
v L "var" 2 675 "int8" `366 
v L "bit" 2 675 "int8" `367 
f B "bit_set" 2 675 "void(int8 var,int8 bit)" `365 
f N "bit_set" 2 676 ""
v L "var" 2 676 "int16" `366 
v L "bit" 2 676 "int8" `370 
f G "bit_set" 2 676 "void(int16 var,int8 bit)" `368 
f N "bit_set" 2 677 ""
v L "var" 2 677 "int32" `366 
v L "bit" 2 677 "int8" `373 
f G "bit_set" 2 677 "void(int32 var,int8 bit)" `371 
f N "bit_clear" 2 678 ""
v L "var" 2 678 "int8" `375 
v L "bit" 2 678 "int8" `376 
f B "bit_clear" 2 678 "void(int8 var,int8 bit)" `374 
f N "bit_clear" 2 679 ""
v L "var" 2 679 "int16" `375 
v L "bit" 2 679 "int8" `379 
f G "bit_clear" 2 679 "void(int16 var,int8 bit)" `377 
f N "bit_clear" 2 680 ""
v L "var" 2 680 "int32" `375 
v L "bit" 2 680 "int8" `382 
f G "bit_clear" 2 680 "void(int32 var,int8 bit)" `380 
f N "bit_test" 2 681 ""
v L "var" 2 681 "int8" `384 
v L "bit" 2 681 "int8" `385 
f B "bit_test" 2 681 "int8(int8 var,int8 bit)" `383 
f N "bit_test" 2 682 ""
v L "var" 2 682 "int16" `384 
v L "bit" 2 682 "int8" `388 
f G "bit_test" 2 682 "int8(int16 var,int8 bit)" `386 
f N "bit_test" 2 683 ""
v L "var" 2 683 "int32" `384 
v L "bit" 2 683 "int8" `391 
f G "bit_test" 2 683 "int8(int32 var,int8 bit)" `389  "#use delay() Prototypes:"
f N "delay_cycles" 2 686 ""
v L "count" 2 686 "int8" `393 
f B "delay_cycles" 2 686 "void(int8 count)" `392 
f N "delay_ms" 2 687 ""
v L "time" 2 687 "int16" `395 
f B "delay_ms" 2 687 "void(int16 time)" `394 
f N "delay_us" 2 688 ""
v L "time" 2 688 "int16" `397 
f B "delay_us" 2 688 "void(int16 time)" `396  "#use rs232() Prototypes:"
f N "putchar" 2 691 ""
v L "cdata" 2 691 "int8" `399 
f B "putchar" 2 691 "void(int8 cdata)" `398 
f N "putchar" 2 692 ""
v L "cdata" 2 692 "int8" `401 
v L "stream" 2 692 "int8" `402 
f G "putchar" 2 692 "void(int8 cdata,int8 stream)" `400 
f N "puts" 2 693 ""
v L "string" 2 693 "*int8" `404 
f B "puts" 2 693 "void(*int8 string)" `403 
f N "puts" 2 694 ""
v L "string" 2 694 "*int8" `406 
v L "stream" 2 694 "int8" `407 
f G "puts" 2 694 "void(*int8 string,int8 stream)" `405 
f N "getch" 2 695 ""
f B "getch" 2 695 "int8()" `408 
f N "getch" 2 696 ""
v L "stream" 2 696 "int8" `410 
f G "getch" 2 696 "int8(int8 stream)" `409 
f N "gets" 2 697 ""
v L "string" 2 697 "*int8" `412 
f B "gets" 2 697 "void(*int8 string)" `411 
f N "gets" 2 698 ""
v L "string" 2 698 "*int8" `414 
v L "stream" 2 698 "int8" `415 
f G "gets" 2 698 "void(*int8 string,int8 stream)" `413 
f N "kbhit" 2 699 ""
f B "kbhit" 2 699 "int8()" `416 
f N "kbhit" 2 700 ""
v L "stream" 2 700 "int8" `418 
f G "kbhit" 2 700 "int8(int8 stream)" `417 
f N "printf" 2 701 ""
v L "string" 2 701 "*int8" `420 
f B "printf" 2 701 "void(*int8 string,*int8 _VA_LIST)" `419 
f N "fprintf" 2 702 ""
v L "stream" 2 702 "int8" `423 
v L "string" 2 702 "*int8" `424 
f B "fprintf" 2 702 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `422 
f N "putc_send" 2 703 ""
f B "putc_send" 2 703 "void()" `426 
f N "fputc_send" 2 704 ""
v L "stream" 2 704 "int8" `428 
f B "fputc_send" 2 704 "void(int8 stream)" `427 
f N "rcv_buffer_full" 2 705 ""
f B "rcv_buffer_full" 2 705 "int8()" `429 
f N "rcv_buffer_full" 2 706 ""
v L "stream" 2 706 "int8" `431 
f G "rcv_buffer_full" 2 706 "int8(int8 stream)" `430 
f N "rcv_buffer_bytes" 2 707 ""
f B "rcv_buffer_bytes" 2 707 "int16()" `432 
f N "rcv_buffer_bytes" 2 708 ""
v L "stream" 2 708 "int8" `434 
f G "rcv_buffer_bytes" 2 708 "int16(int8 stream)" `433 
f N "tx_buffer_full" 2 709 ""
f B "tx_buffer_full" 2 709 "int8()" `435 
f N "tx_buffer_full" 2 710 ""
v L "stream" 2 710 "int8" `437 
f G "tx_buffer_full" 2 710 "int8(int8 stream)" `436 
f N "tx_buffer_bytes" 2 711 ""
f B "tx_buffer_bytes" 2 711 "int16()" `438 
f N "tx_buffer_bytes" 2 712 ""
v L "stream" 2 712 "int8" `440 
f G "tx_buffer_bytes" 2 712 "int16(int8 stream)" `439  "#use i2c() Prototypes:"
f N "i2c_read" 2 715 ""
f B "i2c_read" 2 715 "int8()" `441 
f N "i2c_read" 2 716 ""
v L "stream" 2 716 "int8" `443 
f G "i2c_read" 2 716 "int8(int8 stream)" `442 
f N "i2c_read" 2 717 ""
v L "stream" 2 717 "int8" `445 
v L "ack" 2 717 "int8" `446 
f G "i2c_read" 2 717 "int8(int8 stream,int8 ack)" `444 
f N "i2c_write" 2 718 ""
v L "data" 2 718 "int8" `448 
f B "i2c_write" 2 718 "int8(int8 data)" `447 
f N "i2c_write" 2 719 ""
v L "stream" 2 719 "int8" `450 
v L "data" 2 719 "int8" `451 
f G "i2c_write" 2 719 "int8(int8 stream,int8 data)" `449 
f N "i2c_start" 2 720 ""
f B "i2c_start" 2 720 "void()" `452 
f N "i2c_start" 2 721 ""
v L "stream" 2 721 "int8" `454 
f G "i2c_start" 2 721 "void(int8 stream)" `453 
f N "i2c_start" 2 722 ""
v L "stream" 2 722 "int8" `456 
v L "restart" 2 722 "int8" `457 
f G "i2c_start" 2 722 "void(int8 stream,int8 restart)" `455 
f N "i2c_stop" 2 723 ""
f B "i2c_stop" 2 723 "void()" `458 
f N "i2c_stop" 2 724 ""
v L "stream" 2 724 "int8" `460 
f G "i2c_stop" 2 724 "void(int8 stream)" `459 
f N "i2c_isr_state" 2 725 ""
f B "i2c_isr_state" 2 725 "int8()" `461 
f N "i2c_slaveaddr" 2 726 ""
v L "addr" 2 726 "int8" `463 
f B "i2c_slaveaddr" 2 726 "void(int8 addr)" `462 
f N "i2c_slaveaddr" 2 727 ""
v L "stream" 2 727 "int8" `465 
v L "addr" 2 727 "int8" `466 
f G "i2c_slaveaddr" 2 727 "void(int8 stream,int8 addr)" `464 
f N "i2c_poll" 2 728 ""
f B "i2c_poll" 2 728 "int8()" `467 
f N "i2c_poll" 2 729 ""
v L "stream" 2 729 "int8" `469 
f G "i2c_poll" 2 729 "int8(int8 stream)" `468 
f N "i2c_init" 2 730 ""
v L "baud" 2 730 "int32" `471 
f B "i2c_init" 2 730 "void(int32 baud)" `470 
f N "i2c_init" 2 731 ""
v L "stream" 2 731 "int8" `473 
v L "baud" 2 731 "int32" `474 
f G "i2c_init" 2 731 "void(int8 stream,int32 baud)" `472  "#use spi() Prototypes:"
f N "spi_xfer" 2 734 ""
f B "spi_xfer" 2 734 "int8()" `475 
f N "spi_xfer" 2 735 ""
f G "spi_xfer" 2 735 "int16()" `476 
f N "spi_xfer" 2 736 ""
f G "spi_xfer" 2 736 "int32()" `477 
f N "spi_xfer" 2 737 ""
v L "data" 2 737 "int8" `479 
f G "spi_xfer" 2 737 "int8(int8 data)" `478 
f N "spi_xfer" 2 738 ""
v L "data" 2 738 "int16" `481 
f G "spi_xfer" 2 738 "int16(int16 data)" `480 
f N "spi_xfer" 2 739 ""
v L "data" 2 739 "int32" `483 
f G "spi_xfer" 2 739 "int32(int32 data)" `482 
f N "spi_xfer" 2 740 ""
v L "stream" 2 740 "int8" `485 
v L "data" 2 740 "int8" `486 
f G "spi_xfer" 2 740 "int8(int8 stream,int8 data)" `484 
f N "spi_xfer" 2 741 ""
v L "stream" 2 741 "int8" `485 
v L "data" 2 741 "int16" `489 
f G "spi_xfer" 2 741 "int16(int8 stream,int16 data)" `487 
f N "spi_xfer" 2 742 ""
v L "stream" 2 742 "int8" `485 
v L "data" 2 742 "int32" `492 
f G "spi_xfer" 2 742 "int32(int8 stream,int32 data)" `490 
f N "spi_xfer" 2 743 ""
v L "stream" 2 743 "int8" `494 
v L "data" 2 743 "int8" `495 
v L "bits" 2 743 "int8" `496 
f G "spi_xfer" 2 743 "int8(int8 stream,int8 data,int8 bits)" `493 
f N "spi_xfer" 2 744 ""
v L "stream" 2 744 "int8" `494 
v L "data" 2 744 "int16" `495 
v L "bits" 2 744 "int8" `500 
f G "spi_xfer" 2 744 "int16(int8 stream,int16 data,int8 bits)" `497 
f N "spi_xfer" 2 745 ""
v L "stream" 2 745 "int8" `494 
v L "data" 2 745 "int32" `495 
v L "bits" 2 745 "int8" `504 
f G "spi_xfer" 2 745 "int32(int8 stream,int32 data,int8 bits)" `501 
f N "spi_init" 2 746 ""
v L "baud" 2 746 "int32" `506 
f B "spi_init" 2 746 "void(int32 baud)" `505 
f N "spi_init" 2 747 ""
v L "stream" 2 747 "int8" `508 
v L "baud" 2 747 "int32" `509 
f G "spi_init" 2 747 "void(int8 stream,int32 baud)" `507 
f N "spi_speed" 2 748 ""
v L "baud" 2 748 "int32" `511 
f B "spi_speed" 2 748 "void(int32 baud)" `510 
f N "spi_speed" 2 749 ""
v L "stream" 2 749 "int8" `513 
v L "baud" 2 749 "int32" `514 
f G "spi_speed" 2 749 "void(int8 stream,int32 baud)" `512 
f N "spi_speed" 2 750 ""
v L "stream" 2 750 "int8" `516 
v L "baud" 2 750 "int32" `517 
v L "clock" 2 750 "int32" `518 
f G "spi_speed" 2 750 "void(int8 stream,int32 baud,int32 clock)" `515 
f N "spi_prewrite" 2 751 ""
v L "data" 2 751 "int8" `520 
f B "spi_prewrite" 2 751 "void(int8 data)" `519 
f N "spi_prewrite" 2 752 ""
v L "data" 2 752 "int16" `522 
f G "spi_prewrite" 2 752 "void(int16 data)" `521 
f N "spi_prewrite" 2 753 ""
v L "data" 2 753 "int32" `524 
f G "spi_prewrite" 2 753 "void(int32 data)" `523 
f N "spi_prewrite" 2 754 ""
v L "??65535" 2 754 "int8" `526 
v L "data" 2 754 "int8" `527 
f G "spi_prewrite" 2 754 "void(int8 ,int8 data)" `525 
f N "spi_prewrite" 2 755 ""
v L "??65535" 2 755 "int8" `526 
v L "data" 2 755 "int16" `530 
f G "spi_prewrite" 2 755 "void(int8 ,int16 data)" `528 
f N "spi_prewrite" 2 756 ""
v L "??65535" 2 756 "int8" `526 
v L "data" 2 756 "int32" `533 
f G "spi_prewrite" 2 756 "void(int8 ,int32 data)" `531 
f N "spi_xfer_in" 2 757 ""
f B "spi_xfer_in" 2 757 "int8()" `534 
f N "spi_xfer_in" 2 758 ""
f G "spi_xfer_in" 2 758 "int16()" `535 
f N "spi_xfer_in" 2 759 ""
f G "spi_xfer_in" 2 759 "int32()" `536 
f N "spi_xfer_in" 2 760 ""
v L "bits" 2 760 "int8" `538 
f G "spi_xfer_in" 2 760 "int8(int8 bits)" `537 
f N "spi_xfer_in" 2 761 ""
v L "bits" 2 761 "int8" `540 
f G "spi_xfer_in" 2 761 "int16(int8 bits)" `539 
f N "spi_xfer_in" 2 762 ""
v L "bits" 2 762 "int8" `542 
f G "spi_xfer_in" 2 762 "int32(int8 bits)" `541 
f N "spi_xfer_in" 2 763 ""
v L "stream" 2 763 "int8" `544 
v L "bits" 2 763 "int8" `545 
f G "spi_xfer_in" 2 763 "int8(int8 stream,int8 bits)" `543 
f N "spi_xfer_in" 2 764 ""
v L "stream" 2 764 "int8" `544 
v L "bits" 2 764 "int8" `548 
f G "spi_xfer_in" 2 764 "int16(int8 stream,int8 bits)" `546 
f N "spi_xfer_in" 2 765 ""
v L "stream" 2 765 "int8" `544 
v L "bits" 2 765 "int8" `551 
f G "spi_xfer_in" 2 765 "int32(int8 stream,int8 bits)" `549  "#use rtos() Prototypes:"
f N "rtos_run" 2 768 ""
f B "rtos_run" 2 768 "void()" `552 
f N "rtos_yield" 2 769 ""
f B "rtos_yield" 2 769 "void()" `553 
f N "rtos_enable" 2 770 ""
v L "task" 2 770 "int8" `555 
f B "rtos_enable" 2 770 "void(int8 task)" `554 
f N "rtos_disable" 2 771 ""
v L "task" 2 771 "int8" `557 
f B "rtos_disable" 2 771 "void(int8 task)" `556 
f N "rtos_terminate" 2 772 ""
f B "rtos_terminate" 2 772 "void()" `558 
f N "rtos_await" 2 773 ""
v L "flag" 2 773 "int8" `560 
f B "rtos_await" 2 773 "void(int8 flag)" `559 
f N "rtos_wait" 2 774 ""
v L "sem" 2 774 "int8" `562 
f B "rtos_wait" 2 774 "void(int8 sem)" `561 
f N "rtos_signal" 2 775 ""
v L "sem" 2 775 "int8" `564 
f B "rtos_signal" 2 775 "void(int8 sem)" `563 
f N "rtos_msg_send" 2 776 ""
v L "task" 2 776 "int8" `566 
v L "msg" 2 776 "int8" `567 
f B "rtos_msg_send" 2 776 "void(int8 task,int8 msg)" `565 
f N "rtos_msg_read" 2 777 ""
f B "rtos_msg_read" 2 777 "int8()" `568 
f N "rtos_msg_poll" 2 778 ""
f B "rtos_msg_poll" 2 778 "int8()" `569 
f N "rtos_overrun" 2 779 ""
v L "task" 2 779 "int8" `571 
f B "rtos_overrun" 2 779 "int8(int8 task)" `570 
f N "rtos_stats" 2 780 ""
v L "task" 2 780 "int8" `573 
v L "stat" 2 780 "*int8" `574 
f B "rtos_stats" 2 780 "void(int8 task,*int8 stat)" `572  "#use timer() Prototypes:"
f N "get_ticks" 2 783 ""
f B "get_ticks" 2 783 "int8()" `575 
f N "get_ticks" 2 784 ""
f G "get_ticks" 2 784 "int16()" `576 
f N "get_ticks" 2 785 ""
f G "get_ticks" 2 785 "int32()" `577 
f N "get_ticks" 2 786 ""
v L "stream" 2 786 "int8" `579 
f G "get_ticks" 2 786 "int8(int8 stream)" `578 
f N "get_ticks" 2 787 ""
v L "stream" 2 787 "int8" `581 
f G "get_ticks" 2 787 "int16(int8 stream)" `580 
f N "get_ticks" 2 788 ""
v L "stream" 2 788 "int8" `583 
f G "get_ticks" 2 788 "int32(int8 stream)" `582 
f N "set_ticks" 2 789 ""
v L "value" 2 789 "int8" `585 
f B "set_ticks" 2 789 "void(int8 value)" `584 
f N "set_ticks" 2 790 ""
v L "value" 2 790 "int16" `587 
f G "set_ticks" 2 790 "void(int16 value)" `586 
f N "set_ticks" 2 791 ""
v L "value" 2 791 "int32" `589 
f G "set_ticks" 2 791 "void(int32 value)" `588 
f N "set_ticks" 2 792 ""
v L "stream" 2 792 "int8" `591 
v L "value" 2 792 "int8" `592 
f G "set_ticks" 2 792 "void(int8 stream,int8 value)" `590 
f N "set_ticks" 2 793 ""
v L "stream" 2 793 "int8" `591 
v L "value" 2 793 "int16" `595 
f G "set_ticks" 2 793 "void(int8 stream,int16 value)" `593 
f N "set_ticks" 2 794 ""
v L "stream" 2 794 "int8" `591 
v L "value" 2 794 "int32" `598 
f G "set_ticks" 2 794 "void(int8 stream,int32 value)" `596  "#use pwm() Prototypes:"
f N "pwm_on" 2 797 ""
f B "pwm_on" 2 797 "void()" `599 
f N "pwm_on" 2 798 ""
v L "stream" 2 798 "int8" `601 
f G "pwm_on" 2 798 "void(int8 stream)" `600 
f N "pwm_off" 2 799 ""
f B "pwm_off" 2 799 "void()" `602 
f N "pwm_off" 2 800 ""
v L "stream" 2 800 "int8" `604 
f G "pwm_off" 2 800 "void(int8 stream)" `603 
f N "pwm_set_duty" 2 801 ""
v L "duty" 2 801 "int16" `606 
f B "pwm_set_duty" 2 801 "void(int16 duty)" `605 
f N "pwm_set_duty" 2 802 ""
v L "stream" 2 802 "int8" `608 
v L "duty" 2 802 "int16" `609 
f G "pwm_set_duty" 2 802 "void(int8 stream,int16 duty)" `607 
f N "pwm_set_duty_percent" 2 803 ""
v L "percent" 2 803 "int16" `611 
f B "pwm_set_duty_percent" 2 803 "void(int16 percent)" `610 
f N "pwm_set_duty_percent" 2 804 ""
v L "stream" 2 804 "int8" `613 
v L "percent" 2 804 "int16" `614 
f G "pwm_set_duty_percent" 2 804 "void(int8 stream,int16 percent)" `612 
f N "pwm_set_frequency" 2 805 ""
v L "frequency" 2 805 "int32" `616 
f B "pwm_set_frequency" 2 805 "void(int32 frequency)" `615 
f N "pwm_set_frequency" 2 806 ""
v L "stream" 2 806 "int8" `618 
v L "frequency" 2 806 "int32" `619 
f G "pwm_set_frequency" 2 806 "void(int8 stream,int32 frequency)" `617  "#use capture() Prototypes:"
f N "get_capture_time" 2 809 ""
f B "get_capture_time" 2 809 "int16()" `620 
f N "get_capture_time" 2 810 ""
v L "stream" 2 810 "int8" `622 
f G "get_capture_time" 2 810 "int16(int8 stream)" `621 
f N "get_capture_event" 2 811 ""
f B "get_capture_event" 2 811 "int8()" `623 
f N "get_capture_event" 2 812 ""
v L "stream" 2 812 "int8" `625 
f G "get_capture_event" 2 812 "int8(int8 stream)" `624  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
f N "goto_address" 2 825 ""
v L "address" 2 825 "int16" `627 
f B "goto_address" 2 825 "void(int16 address)" `626 
f N "label_address" 2 826 ""
v L "label" 2 826 "int16" `629 
f B "label_address" 2 826 "int16(int16 label)" `628  "Program Memory Prototypes:"
f N "read_program_memory" 2 829 ""
v L "address" 2 829 "int16" `631 
v L "dataptr" 2 829 "*int8" `632 
v L "count" 2 829 "int16" `633 
f B "read_program_memory" 2 829 "void(int16 address,*int8 dataptr,int16 count)" `630 
f N "read_program_eeprom" 2 830 ""
v L "address" 2 830 "int16" `635 
f B "read_program_eeprom" 2 830 "int16(int16 address)" `634 
f N "erase_program_eeprom" 2 831 ""
v L "address" 2 831 "int16" `637 
f B "erase_program_eeprom" 2 831 "void(int16 address)" `636 
f N "write_program_memory" 2 832 ""
v L "address" 2 832 "int16" `639 
v L "dataptr" 2 832 "*int8" `640 
v L "count" 2 832 "int16" `641 
f B "write_program_memory" 2 832 "void(int16 address,*int8 dataptr,int16 count)" `638 
f N "write_program_eeprom" 2 833 ""
v L "address" 2 833 "int16" `643 
v L "data" 2 833 "int16" `644 
f B "write_program_eeprom" 2 833 "void(int16 address,int16 data)" `642  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 838 "int16" `645 
f N "read_eeprom" 2 843 ""
v L "address" 2 843 "__EEADDRESS__" `647 
f B "read_eeprom" 2 843 "int8(__EEADDRESS__ address)" `646 
f N "write_eeprom" 2 844 ""
v L "address" 2 844 "__EEADDRESS__" `649 
v L "value" 2 844 "int8" `650 
f B "write_eeprom" 2 844 "void(__EEADDRESS__ address,int8 value)" `648  "INT"
c L "write_eeprom" 2 1 4 "FUNCTION"
f N "enable_interrupts" 2 851 ""
v L "interrupt" 2 851 "int32" `652 
f B "enable_interrupts" 2 851 "void(int32 interrupt)" `651 
f N "disable_interrupts" 2 852 ""
v L "interrupt" 2 852 "int32" `654 
f B "disable_interrupts" 2 852 "void(int32 interrupt)" `653 
f N "clear_interrupt" 2 853 ""
v L "interrupt" 2 853 "int32" `656 
f B "clear_interrupt" 2 853 "void(int32 interrupt)" `655 
f N "interrupt_active" 2 854 ""
v L "interrupt" 2 854 "int32" `658 
f B "interrupt_active" 2 854 "int8(int32 interrupt)" `657 
f N "interrupt_enabled" 2 855 ""
v L "interrupt" 2 855 "int32" `660 
f B "interrupt_enabled" 2 855 "int8(int32 interrupt)" `659 
f N "ext_int_edge" 2 856 ""
v L "source" 2 856 "int8" `662 
v L "edge" 2 856 "int8" `663 
f B "ext_int_edge" 2 856 "void(int8 source,int8 edge)" `661 
f N "jump_to_isr" 2 857 ""
v L "address" 2 857 "int16" `665 
f B "jump_to_isr" 2 857 "void(int16 address)" `664  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 859 "0x40"
d G "H_TO_L" 2 860 "0"
d G "GLOBAL" 2 862 "0xF2C0"
d G "PERIPH" 2 863 "0xF240"
d G "INT_RTCC" 2 864 "0x00F220"
d G "INT_TIMER0" 2 865 "0x00F220"
d G "INT_TIMER1" 2 866 "0x009D01"
d G "INT_TIMER2" 2 867 "0x009D02"
d G "INT_EXT_L2H" 2 868 "0x5000F210"
d G "INT_EXT_H2L" 2 869 "0x6000F210"
d G "INT_EXT" 2 870 "0x00F210"
d G "INT_EXT1_L2H" 2 871 "0x5001F008"
d G "INT_EXT1_H2L" 2 872 "0x6001F008"
d G "INT_EXT1" 2 873 "0x00F008"
d G "INT_EXT2_L2H" 2 874 "0x5002F010"
d G "INT_EXT2_H2L" 2 875 "0x6002F010"
d G "INT_EXT2" 2 876 "0x00F010"
d G "INT_RB" 2 877 "0x00FFF208"
d G "INT_AD" 2 878 "0x009D40"
d G "INT_RDA" 2 879 "0x009D20"
d G "INT_TBE" 2 880 "0x009D10"
d G "INT_SSP" 2 881 "0x009D08"
d G "INT_CCP1" 2 882 "0x009D04"
d G "INT_CCP2" 2 883 "0x00A001"
d G "INT_LOWVOLT" 2 884 "0x00A004"
d G "INT_EEPROM" 2 885 "0x00A010"
d G "INT_OSCF" 2 886 "0x00A080"
d G "INT_PWMTB" 2 887 "0x00A310"
d G "INT_IC3DR" 2 888 "0x00A308"
d G "INT_IC2QEI" 2 889 "0x00A304"
d G "INT_IC1" 2 890 "0x00A302"
d G "INT_TIMER5" 2 891 "0x00A301"
D G "RX_PIN" 1 32 "PIN_C7"
D G "TX_PIN" 1 33 "PIN_C6"
D G "RS485_RW" 1 34 "PIN_C0"
C L "jump_to_isr" 1 39 1 "FUNCTION"
V G "SPBRG" 1 51 "int16" `683 
C L "jump_to_isr" 3 1 1 "*"
C L "jump_to_isr" 3 1 1 "*"
D G "UART_H" 3 9 ""
F N "serial_rcv_isr" 3 11 ""
f G "serial_rcv_isr" 3 11 "void()" `684 
F N "serial_td_isr" 3 12 ""
f G "serial_td_isr" 3 12 "void()" `685 
F N "timer1_overflow_isr" 3 13 ""
f G "timer1_overflow_isr" 3 13 "void()" `686 
F N "uart_bgetc" 3 14 ""
f G "uart_bgetc" 3 14 "int8()" `687 
F N "uart_bputc" 3 15 ""
V L "??65535" 3 15 "int8" `689 
f G "uart_bputc" 3 15 "void(int8 )" `688 
F N "uart_init" 3 16 ""
V L "??65535" 3 16 "int8" `691 
V L "??65535" 3 16 "int8" `692 
f G "uart_init" 3 16 "void(int8 ,int8 )" `690  "Uart parser state machine states *"
F N "parse_uart_data" 3 18 ""
f G "parse_uart_data" 3 18 "void()" `693 
F N "wait_for_start" 3 19 ""
f G "wait_for_start" 3 19 "void()" `694  "Waits for the # character"
F N "wait_for_adr" 3 20 ""
f G "wait_for_adr" 3 20 "void()" `695  "Wait for device address"
F N "parse_id" 3 21 ""
f G "parse_id" 3 21 "void()" `696  "Reads the 3 char identifier, stores it in data_id"
F N "parse_length" 3 22 ""
f G "parse_length" 3 22 "void()" `697  "Reads [LENGTH] field, stores it in data_length"
F N "parse_data" 3 23 ""
f G "parse_data" 3 23 "void()" `698  "Reads the data into data_buffer[]"
F N "parse_crc" 3 24 ""
f G "parse_crc" 3 24 "void()" `699  "Reads the crc checksum (and checks the data)"
F N "parse_end" 3 25 ""
f G "parse_end" 3 25 "void()" `700  "End of data packet ($) handling.. start all over."
F N "crc_check" 3 26 ""
f G "crc_check" 3 26 "int8()" `701  "UART_H *"
C L "crc_check" 4 2 13 "FUNCTION"
C L "crc_check" 3 1 1 "*"
C L "crc_check" 3 1 1 "*"
C L "crc_check" 3 1 2 "*"
D G "UART_RX_TIMEOUT" 4 24 "1" "Timeout in mS"
D G "TIMER1_REFRESH" 4 25 " (long)(65536 - (UART_RX_TIMEOUT * 10000))"
D G "UART_BUFFER_SIZE" 4 26 "64"
D G "DATA_BUFFER_SIZE" 4 27 "32"
D G "uart_bkbhit" 4 28 " (in.next_in!=in.next_out)"
C L "crc_check" 4 23 1 "FUNCTION"
T G "t_buffer" 4 36 "{int8[64] uart_buffer,int8 next_in,int8 next_out}" `706 
T G "t_package" 4 45 "{int8[32] data_buffer,int8 dev_address,int8 ID,int8 data_length,int8 crc}" `713 
F N "*t_fptr" 4 47 ""
T G "*t_fptr" 4 47 "void()" `714  "Variables"
C L "*t_fptr" 4 23 1 "FUNCTION"
V G "in" 4 50 "t_buffer" `716 
V G "out" 4 51 "t_buffer" `717 
C L "*t_fptr" 4 23 1 "FUNCTION"
V G "data" 4 53 "t_package" `718 
V G "NEW_MESSAGE_RECEIVE" 4 54 "int1" `719 
C L "*t_fptr" 4 23 1 "FUNCTION"
V G "parse_next" 4 56 "t_fptr" `720 
C L "*t_fptr" 4 23 1 "FUNCTION"
V G "count" 4 57 "int8" `721 
C L "*t_fptr" 4 23 2 "FUNCTION"
C L "*t_fptr" 4 59 1 "*"
F N "serial_rcv_isr" 4 63 ""
F G "serial_rcv_isr" 4 64 "void()" `684 
V L "t" 4 65 "int8" `722 
C L "serial_rcv_isr" 4 59 1 "FUNCTION"
C L "serial_td_isr" 4 73 1 "*"
F N "serial_td_isr" 4 77 ""
F G "serial_td_isr" 4 78 "void()" `685 
C L "timer1_overflow_isr" 4 87 1 "*"
F N "timer1_overflow_isr" 4 91 ""
F G "timer1_overflow_isr" 4 92 "void()" `686 
C L "timer1_overflow_isr" 4 87 2 "FUNCTION"
C L "uart_bgetc" 4 99 1 "*"
C L "uart_bgetc" 4 99 1 "*"
F N "uart_bgetc" 4 103 ""
F G "uart_bgetc" 4 104 "int8()" `687 
V L "c" 4 105 "int8" `723 
C L "uart_bputc" 4 111 1 "*"
C L "uart_bputc" 4 111 1 "*"
F N "uart_bputc" 4 115 ""
V L "c" 4 115 "int8" `725 
F G "uart_bputc" 4 116 "void(int8 c)" `688 
V L "restart" 4 117 "int1" `724 
V L "ni" 4 118 "int8" `725 
C L "uart_init" 4 128 1 "*"
C L "uart_init" 4 128 1 "*"
C L "uart_init" 4 128 1 "*"
F N "uart_init" 4 133 ""
V L "baudrate" 4 133 "int8" `691 
V L "dev_id" 4 133 "int8" `728 
F G "uart_init" 4 134 "void(int8 baudrate,int8 dev_id)" `690 
V L "divisor" 4 135 "int16" `726 
C L "uart_init" 4 128 1 "FUNCTION"
C L "uart_init" 4 128 1 "FUNCTION"
C L "uart_init" 4 128 1 "FUNCTION"
C L "uart_init" 4 128 1 "FUNCTION"
C L "uart_init" 4 128 5 "FUNCTION"
C L "uart_init" 4 128 2 "FUNCTION"
C L "parse_uart_data" 4 170 1 "*"
F N "parse_uart_data" 4 173 ""
F G "parse_uart_data" 4 174 "void()" `693 
C L "wait_for_start" 4 177 1 "*"
F N "wait_for_start" 4 180 ""
F G "wait_for_start" 4 181 "void()" `694  "* If there is no data available, return */"
C L "wait_for_start" 4 177 1 "FUNCTION"
C L "wait_for_start" 4 177 1 "FUNCTION"
C L "wait_for_start" 4 177 1 "FUNCTION"
C L "wait_for_adr" 4 202 1 "*"
F N "wait_for_adr" 4 205 ""
F G "wait_for_adr" 4 206 "void()" `695  "* If there is no data available, return */"
C L "parse_id" 4 216 1 "*"
F N "parse_id" 4 219 ""
F G "parse_id" 4 220 "void()" `696  "* If there is no data available, return */"
C L "parse_length" 4 229 1 "*"
F N "parse_length" 4 232 ""
F G "parse_length" 4 233 "void()" `697  "* If there is no data available, return */"
C L "parse_data" 4 242 1 "*"
F N "parse_data" 4 245 ""
F G "parse_data" 4 246 "void()" `698  "* If there is no data available, return */"
C L "parse_data" 4 242 2 "FUNCTION"
C L "parse_data" 4 242 1 "FUNCTION"
C L "parse_data" 4 242 1 "FUNCTION"
C L "parse_crc" 4 262 1 "*"
F N "parse_crc" 4 265 ""
F G "parse_crc" 4 266 "void()" `699  "* If there is no data available, return */"
C L "parse_crc" 4 262 1 "FUNCTION"
C L "parse_crc" 4 262 2 "FUNCTION"
C L "parse_end" 4 283 1 "*"
F N "parse_end" 4 286 ""
F G "parse_end" 4 287 "void()" `700  "* If there is no data available, return */"
C L "parse_end" 4 283 2 "FUNCTION"
C L "parse_end" 4 283 2 "FUNCTION"
C L "parse_end" 4 283 1 "FUNCTION"
C L "crc_check" 4 307 1 "*"
C L "crc_check" 4 307 1 "*"
F N "crc_check" 4 311 ""
F G "crc_check" 4 312 "int8()" `701 
V L "i" 4 313 "int8" `733 
V L "crc8" 4 314 "int8" `734 
D G "PROTOCOL_H" 5 7 ""
C L "protocol_cmd_parse_request" 5 2 1 "FUNCTION"
F N "protocol_cmd_parse_request" 5 10 ""
V L "??65535" 5 10 "int8" `736 
f G "protocol_cmd_parse_request" 5 10 "int8(int8 )" `735 
F N "set_address_hdlr" 5 11 ""
f G "set_address_hdlr" 5 11 "void()" `737 
F N "drv_enable_hdlr" 5 12 ""
f G "drv_enable_hdlr" 5 12 "void()" `738  "PROTOCOL_H *"
C L "drv_enable_hdlr" 6 2 3 "FUNCTION"
C L "drv_enable_hdlr" 5 2 3 "FUNCTION"
C L "drv_enable_hdlr" 3 1 1 "*"
C L "drv_enable_hdlr" 3 1 1 "*"
C L "drv_enable_hdlr" 3 1 2 "*"
C L "drv_enable_hdlr" 6 11 1 "FUNCTION"
F N "*t_cmdHdlr" 6 12 ""
T G "*t_cmdHdlr" 6 12 "void()" `739 
E G "CMD_SET_ADDRESS" 6 17 "0" `742 
E G "CMD_DRIVER_ENABLE" 6 18 "1" `743 
T G "e_cmdID" 6 18 "" `744 
C L "*t_cmdHdlr" 6 11 1 "FUNCTION"
C L "*t_cmdHdlr" 6 11 1 "FUNCTION"
T G "t_cmd_info" 6 24 "{int1 cmd_id,t_cmdHdlr cmd_hdlr}" `748  "Variables"
V G "cmd_callback" 6 27 "t_cmdHdlr" `749 
V G "cmd_hdlrs" 6 29 "t_cmd_info[1]" `750 
C L "*t_cmdHdlr" 6 11 1 "FUNCTION"
F N "protocol_cmd_parse_request" 6 36 ""
V L "msg_ID" 6 36 "int8" `752 
F G "protocol_cmd_parse_request" 6 37 "int8(int8 msg_ID)" `735 
V L "i" 6 38 "int8" `751 
C L "protocol_cmd_parse_request" 6 11 1 "FUNCTION"
V L "cmd_hdlrs_count" 6 40 "int8" `752 
C L "protocol_cmd_parse_request" 6 11 1 "FUNCTION"
C L "protocol_cmd_parse_request" 6 11 1 "FUNCTION"
C L "protocol_cmd_parse_request" 6 11 1 "FUNCTION"
C L "protocol_cmd_parse_request" 6 11 1 "FUNCTION"
C L "set_address_hdlr" 6 54 1 "*"
F N "set_address_hdlr" 6 57 ""
F G "set_address_hdlr" 6 58 "void()" `737 
C L "drv_enable_hdlr" 6 61 1 "*"
F N "drv_enable_hdlr" 6 64 ""
F G "drv_enable_hdlr" 6 65 "void()" `738 
F N "MAIN" 0 15 ""
F G "MAIN" 0 16 "void()" `755 
C L "MAIN" 0 24 2 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 4
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_power_pwm" 7 0
F B "set_power_pwm0_duty" 1 0
F B "set_power_pwm2_duty" 1 0
F B "set_power_pwm4_duty" 1 0
F B "set_power_pwm6_duty" 1 0
F B "set_power_pwm_override" 3 0
F B "setup_power_pwm_pins" 4 0
F B "setup_power_pwm_faults" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_qei" 1 3
F B "qei_set_count" 1 0
F B "qei_get_count" 0 1
F B "qei_status" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
